"""
   ELEMENTI DI INFORMATICA E PROGRAMMAZIONE

   ***********   TEMPO A DISPOSIZIONE: due ore e un quarto (135 minuti)

   Copiare questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola.
   Se il cognome contiene spazi, apostrofo o altri caratteri non alfabetici, ignorarli;
   se contiene lettere accentate, usare la corrispondente lettera non accentata.
   Usare SOLO IL COGNOME, senza il nome.
   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.
   
   LA COMPRENSIONE DEL TESTO E' PARTE INTEGRANTE DELL'ESAME.
      
   Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
   Le sezioni mancanti e da scrivere sono identificate dal commento # SCRIVERE QUI
   e # FINE SCRIVERE QUI
   
   Gli enunciati "pass" presenti nel codice, all'interno delle sezioni che vanno
   completate, servono a fare in modo che non ci siano errori di sintassi prima che
   il vostro codice venga scritto nelle funzioni e nei metodi:
   lasciateli dove sono, sono istruzioni "nulle", non eseguono niente.
   
   ATTENZIONE: nel codice gia' presente NON sono stati utilizzati caratteri di tabulazione
   per l'indentazione, sono tutti spazi singoli e si consiglia di fare altrettanto.
      
   Una possibile soluzione prevede la scrittura di circa 40
   righe di codice, oltre a quelle gia' presenti.
"""
"""
   Othello (chiamato anche Reversi) e' un gioco di abilita' per due giocatori che si confrontano
   su una schacchiera quadrata (solitamente 8x8) usando pedine a forma di disco che hanno le
   due facce colorate, rispettivamente, di bianco e di nero: durante il gioco le pedine vengono
   posizionate sulla scacchiera in modo da mostrare verso l'alto il colore del giocatore che le
   mette in gioco e, quando richiesto dalle regole, vengono capovolte per mostrare l'altro colore
   e cambiare "proprietario" (anche piu' volte).
   Le pedine non vengono mai rimosse dalla scacchiera ne' spostate: solo posizionate e capovolte.
   Il gioco si svolge in turni e i giocatori si alternano nei turni. Ciascun turno di gioco
   prevede che il giocatore posizioni un disco (con la faccia visibile che mostra il colore
   del giocatore) su una casella libera della scacchiera, seguendo regole descritte nel seguito;
   se il giocatore non ha mosse valide da fare, passa il turno all'altro giocatore senza fare
   alcuna mossa; quando nessuno dei due giocatori ha mosse valide da fare (perche' la scacchiera e'
   piena o per altri motivi), il gioco termina. Il vincitore e' il giocatore che, al termino del
   gioco, ha piu' pedine del proprio colore visibili sulla scacchiera (il gioco puo' anche terminare
   in parita').
   
   REGOLA NUMERO 1: quando il giocatore posiziona la propria pedina in una casella, "cattura"
   pedine dell'avversario (capovolgendole) in tutte le otto direzioni possibili a partire dalla
   casella in cui ha posizionato la nuova pedina. Le pedine catturate sono quelle che si trovano,
   lungo ciascuna delle otto direzioni possibili, tra la nuova pedina posizionata e un'altra pedina
   dello stesso giocatore [la comprensione di questa regola non e' strettamente necessaria per
   svolgere l'esame, il codice del metodo corrispondente e' gia' scritto]
   
   REGOLA NUMERO 2: il giocatore puo' posizionare una pedina in una casella SOLTANTO se questo gli
   consente di "catturare" almeno una pedina avversaria, seguendo la REGOLA NUMERO 1.
   
   VEDIAMO ALCUNI ESEMPI, le mosse vengono specificate mediante una coppia (x, y) dove x e' l'indice
   di riga e y e' l'indice di colonna. I due colori delle pedine sono qui rappresentati dai simboli
   X e O.
   
     01234567
    ----------
   0|        |   Se e' di turno il giocatore O, immaginiamo che faccia la mossa (3, 7)
   1|        |   Questo cattura pedine avversarie sia lungo la riga 3 (nelle colonne 4, 5 e 6)
   2|    X   |   sia lungo la diagonale che porta dalla casella (3, 7) alla casella (6, 4)
   3|   OXXX |
   4|    OXX |
   5|     X  |
   6|    O   |
   7|        |
    ----------
    Dopo la mossa (3, 7) del giocatore O, si ottiene la situazione seguente, dove le pedine
    catturate sono state capovolte (cioe' hanno cambiato proprietario, passando da X a O):
    
     01234567
    ----------
   0|        |   A questo punto il giocatore X puo' fare una delle mosse seguenti:
   1|        |   (4,2) catturando (3,3) in diagonale fino a (2,4)
   2|    X   |   (5,4) catturando (4,4) e (3,4) in verticale fino a (2,4)
   3|   OOOOO|   (5,7) catturando (4,6) e (3,5) in diagonale fino a (2,4)
   4|    OXO |   (4,7) catturando (4,6) in orizzontale fino a (4,5)
   5|     O  |   (6,5) catturando (5,5) in verticale fino a (4,5)
   6|    O   |   (4,3) catturando (4,4) in orizzontale fino a (4,5)
   7|        |   (2,3) catturando (3,4) in diagonale fino a (4,5)
    ----------   (2,5) catturando (3,5) in verticale fino a (4,5)
"""

import random


## Classe che consente di seguire l'evoluzione del gioco Othello/Reversi.
#  Il computer impersona entrambi i giocatori e gioca in modo casuale,
#  seguendo le regole senza mettere in atto alcuna strategia.
#
class OthelloGame:
    ## IN QUESTO COSTRUTTORE BISOGNA ANALIZZARE (ALMENO) I COMMENTI PER CONOSCERE LE VARIABILI DI ESEMPLARE DISPONIBILI
    def __init__(self, size, p1, p2, empty, initialBoard):
        if (
            not isinstance(size, int)
            or size < 8
            or not isinstance(p1, str)
            or len(p1) != 1
            or not isinstance(p2, str)
            or len(p2) != 1
            or not isinstance(empty, str)
            or len(empty) != 1
            or p1 == p2
            or p1 == empty
            or p2 == empty
            or not isinstance(initialBoard, tuple)
        ):
            raise ValueError
        # rimane da verificare il contenuto di initialBoard, verificato in seguito
        self._size = size  # DIMENSIONE DEL LATO DELLA SCACCHIERA (QUADRATA), minimo 8
        self._p1 = p1  # stringa che rappresenta il giocatore 1 (un solo carattere)
        self._p2 = p2  # stringa che rappresenta il giocatore 2 (un solo carattere)
        self._empty = empty  # stringa che rappresenta una casella vuota sulla scacchiera (un solo carattere)
        self._nextPlayer = (
            self._p1
        )  # il prossimo giocatore che deve fare una mossa (si alternera' tra p1 e p2)
        self._board = []  # la scacchiera size x size (lista di liste, per rappresentare una matrice),
        # ogni elemento conterra' una stringa con un solo carattere (p1, p2 oppure empty)
        if len(initialBoard) == 0:  # il parametro di costruzione e' una tupla vuota
            # il gioco parte da una scacchiera avente una configurazone predefinita
            for i in range(self._size):
                self._board.append(self._size * [self._empty])
            # quattro pedine al centro della scacchiera, due per ciascun giocatore, disposte "a X"
            halfsize = self._size // 2
            self._board[halfsize - 1][halfsize] = self._p1
            self._board[halfsize][halfsize - 1] = self._p1
            self._board[halfsize - 1][halfsize - 1] = self._p2
            self._board[halfsize][halfsize] = self._p2
        else:
            # il gioco parte da una configurazione fornita come parametro di costruzione;
            # verifico che initialBoard contenga una scacchiera valida e la copio in self._board
            # (ho gia' verificato che sia una tupla)
            if len(initialBoard) != size:
                raise ValueError
            for i in range(self._size):
                if not isinstance(initialBoard[i], str) or len(initialBoard[i]) != size:
                    raise ValueError
                for value in initialBoard[
                    i
                ]:  # controllo che le stringhe contengano caratteri validi
                    if value not in (p1, p2, empty):
                        raise ValueError
                self._board.append(list(initialBoard[i]))

    # NON e' NECESSARIO LEGGERE/CAPIRE QUESTO COMMENTO
    #
    # Le otto direzioni possibili, a partire da una posizione qualsiasi;
    # questa costante e' usata dal metodo isValidMoveFor ed eventualmente anche da altri.
    # Per ciascuna delle otto tuple, il primo valore e' la variazione dell'indice di riga,
    # mentre il secondo valore e' la variazione dell'indice di colonna, a partire da una
    # determinata posizione sulla scacchiera.
    # Gli esempi che seguono sono riferiti a una scacchiera 8x8.
    # Ad esempio, a partire dalla posizione (4, 3), la tupla (-1, -1) identifica la posizione
    # (4-1, 3-1), cioe' (3, 2), che e' la posizione in alto a sinistra tra le 8 posizioni adiacenti
    # a (4, 3). Applicando ripetutamente la medesima coppia di variazioni, si ottengono, una dopo
    # l'altra, le posizioni che appartengono alla diagonale verso l'alto e verso sinistra, a partire
    # dalla posizione data, (4, 3) in questo esempio: (3, 2), poi (2, 1), poi (1, 0).
    # Analogamente, ad esempio, la tupla (0, 1) individua la posizione a destra (sulla stessa riga)
    # tra le 8 adiacenti, e via cosi', a partire da (4, 3) si ottiene: (4, 4), (4, 5), (4, 6), (4, 7)
    DIRECTIONS = ((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1))

    ## Verifica se, a partire da una determinata posizione, la direzione indicata
    #  consente di "catturare" almeno una pedina avversaria.
    #
    #  @param player il giocatore che sta piazzando la nuova pedina
    #  @param row indice di riga della nuova pedina
    #  @param column indice di colonna della nuova pedina
    #  @param direction una delle tuple appartenente alla tupla OthelloGame.DIRECTIONS
    #
    #  @return True se la direzione consente di catturare pedine, altrimenti False
    #
    #  METODO GIa' REALIZZATO, NON IMPORTA ANALIZZARLO, NON SI PUo' MODIFICARE
    #
    def isGoodDirection(self, player, row, column, direction):
        if player == self._p1:
            opponent = self._p2
        else:
            opponent = self._p1
        rowdiff = direction[0]
        coldiff = direction[1]
        xrow = row + rowdiff
        xcol = column + coldiff
        count = 0
        while self.isValidPosition(xrow, xcol) and self._board[xrow][xcol] == opponent:
            count += 1
            xrow += rowdiff
            xcol += coldiff
        return (
            count > 0
            and self.isValidPosition(xrow, xcol)
            and self._board[xrow][xcol] == player
        )

    ## Verifica se il giocatore indicato puo' piazzare una nuova pedina nella posizione specificata,
    #  rispettando le regole del gioco.
    #
    #  @param player il giocatore di cui si deve valutare la mossa
    #  @param row indice di riga della nuova pedina che si vorrebbe posizionare
    #  @param column indice di colonna della nuova pedina che si vorrebbe posizionare
    #
    #  @return True se la mossa e' valida per il giocatore, altrimenti False
    #
    #  METODO GIa' REALIZZATO, NON IMPORTA ANALIZZARLO, NON SI PUo' MODIFICARE
    #
    #  *************************************************************************************
    #  ATTENZIONE, NOLTO IMPORTANTE: bisogna analizzare e capire IL COMMENTO che descrive
    #  la funzionalita' svolta dal metodo, perche' poi e' necessario/utile invocarlo in altri
    #  metodi che vanno progettati.
    #  *************************************************************************************
    #
    def isValidMoveFor(self, player, row, column):
        if not self.isEmpty(row, column):
            return False
        for direction in OthelloGame.DIRECTIONS:
            if self.isGoodDirection(player, row, column, direction):
                return True
        return False

    ## Effettua una "mossa" di "rinuncia al turno di gioco" per il giocatore di turno,
    #  perche' non ha mosse valide da fare. L'effetto e' soltanto quello di cambiare il
    #  giocatore di turno, che sara' l'altro giocatore.
    #
    #  METODO GIa' REALIZZATO, NON IMPORTA ANALIZZARLO, NON SI PUo' MODIFICARE
    #
    def passMove(self):
        self.switchPlayer()

    ## Modifica il giocatore di turno, che dovra' fare la prossima mossa.
    #  Se il valore attuale di self._nextPlayer e' self._p1, allora assegna
    #  self._p2 a self._nextPlayer; altrimenti, le assegna il valore self._p2
    #  Viene invocato da passMove e da move.
    #
    def switchPlayer(self):
        # SCRIVERE QUI
        pass
        if self._nextPlayer == self._p1:
            self._nextPlayer = self._p2
        else:
            self._nextPlayer = self._p1
        # FINE SCRIVERE QUI

    ## Verifica se una coppia di coordinate e' valida sulla scacchiera.
    #
    #  @param row indice di riga, deve essere non negativo e minore di self._size
    #  @param column indice di colonna, deve essere non negativo e minore di self._size
    #
    #  @return True se le coordinate sono entrambe valide, altrimenti False
    #
    def isValidPosition(self, row, column):
        # SCRIVERE QUI
        pass
        return 0 <= row < self._size and 0 <= column < self._size
        # FINE SCRIVERE QUI

    ## Verifica se una posizione sulla scacchiera e' vuota e puo', quindi, ospitare una
    #  nuova pedina. Se la posizione non e' valida solleva ValueError (per determinare
    #  se la posizione e' valida, invoca isValidPosition).
    #
    #  @param row indice di riga
    #  @param column indice di colonna
    #
    #  @return True se le coordinate identificano una posizione vuota e valida, altrimenti False
    #
    def isEmpty(self, row, column):
        # SCRIVERE QUI
        pass
        if not self.isValidPosition(row, column):
            raise ValueError
        return self._board[row][column] == self._empty
        # FINE SCRIVERE QUI

    ## Genera l'elenco delle mosse valide che il giocatore specificato potrebbe fare.
    #
    #  @param player il giocatore di cui si vogliono individuare le mosse valide
    #
    #  @return una tupla contenente le mosse valide per il giocatore indicato;
    #          ciascuna mossa e' una tupla contenente le due coordinate (riga, colonna)
    #          della posizione in cui il giocatore potrebbe collocare una nuova pedina;
    #          la tupla restituita puo' (ovviamente) anche essere vuota, se il giocatore
    #          non ha mosse valide da poter fare
    #
    #  *************************************************************************************
    #  NOTA: si consiglia di invocare (ripetutamente...) il metodo isValidMoveFor
    #  *************************************************************************************
    #
    def getValidMovesFor(self, player):
        # SCRIVERE QUI
        pass
        moves = []
        for row in range(self._size):
            for column in range(self._size):
                if self.isValidMoveFor(player, row, column):
                    moves.append((row, column))
        return tuple(moves)
        # FINE SCRIVERE QUI

    ## Verifica se la partita e' finita, cioe' se nessuno dei due giocatori puo' fare una mossa valida.
    #
    #  @return True se la partita e' finita, altrimenti False
    #
    #  *************************************************************************************
    #  SUGGERIMENTO: ricordare la funzionalita' svolta dal metodo getValidMovesFor...
    #  *************************************************************************************
    #
    def isFinished(self):
        # SCRIVERE QUI
        pass
        return (
            len(self.getValidMovesFor(self._p1)) == 0
            and len(self.getValidMovesFor(self._p2)) == 0
        )
        # FINE SCRIVERE QUI

    ## Calcola e restituisce il punteggio della partita in questo momento.
    #
    #  @return una tupla contenente due valori: il primo e' il numero di pedine del primo giocatore,
    #          il secondo e' il numero di pedine del secondo giocatore
    #
    def getDiskCounts(self):
        # SCRIVERE QUI
        pass
        countPlayer1 = 0
        countPlayer2 = 0
        for row in range(self._size):
            for column in range(self._size):
                if not self.isEmpty(row, column):
                    if self._board[row][column] == self._p1:
                        countPlayer1 += 1
                    else:
                        countPlayer2 += 1
        return (countPlayer1, countPlayer2)
        # FINE SCRIVERE QUI

    ## Calcola e restituisce il risultato della partita
    #  (ipotizzando che sia terminata, senza verificarlo).
    #
    #  @return il giocatore che ha vinto la partita, perche' ha il maggior numero di pedine
    #          sulla scacchiera (cioe' self._p1 oppure self._p2);
    #          in caso di pareggio, restituisce il valore speciale None

    #  *************************************************************************************
    #  SUGGERIMENTO: ricordare la funzionalita' svolta dal metodo getDiskCounts...
    #  *************************************************************************************
    #
    def getWinner(self):
        # SCRIVERE QUI
        pass
        counts = self.getDiskCounts()
        if counts[0] == counts[1]:
            return None
        if counts[0] > counts[1]:
            return self._p1
        return self._p2
        # FINE SCRIVERE QUI

    ## Restituisce una mossa valida per il giocatore di turno, scegliendola a caso tra quelle
    #  possibili.
    #
    #  @return una mossa valida per il giocatore di turno (sotto forma di una tupla di indici,
    #          prima l'indice di riga, poi l'indice di colonna della posizione scelta per
    #          posizionare una nuova pedina); se non ci sono mosse valide per il giocatore di
    #          turno, restituisce il valore speciale None
    #
    #  *************************************************************************************
    #  SUGGERIMENTO: ricordare la funzionalita' svolta dal metodo getValidMovesFor...
    #  *************************************************************************************
    #
    def getRandomMove(self):
        # SCRIVERE QUI
        pass
        moves = self.getValidMovesFor(self._nextPlayer)
        if len(moves) == 0:
            return None
        return moves[random.randint(0, len(moves) - 1)]
        # FINE SCRIVERE QUI

    ## Effettua la mossa specificata per il giocatore di turno, mettendo in atto tutto quanto
    #  avviene in conseguenza della mossa stessa. Viene, poi, modificato il giocatore di turno.
    #  Se la mossa non e' valida per il giocatore di turno, solleva ValueError.
    #
    #  @param row indice di riga
    #  @param column indice di colonna
    #
    #  *************************************************************************************
    #  ATTENZIONE, bisogna realizzare la parte iniziale del metodo
    #  SUGGERIMENTO: ricordare la funzionalita' svolta dal metodo isValidMoveFor...
    #  *************************************************************************************
    #
    def move(self, row, column):
        # SCRIVERE QUI
        """
        la porzione di codice da realizzare deve:
        1) verificare che, per il giocatore di turno (memorizzato in self._nextPlayer)
           sia valido il posizionamento di una propria pedina nella posizione (row, column)
           e, in caso non lo sia, sollevare ValueError
        2) posizionare la pedina del giocatore di turno nella posizione (row, column),
           senza mettere in atto la "cattura" di pedine avversarie, che viene effettuata
           dal codice seguente, gia' realizzato
        """
        if not self.isValidMoveFor(self._nextPlayer, row, column):
            raise ValueError
        self._board[row][column] = self._nextPlayer
        # FINE SCRIVERE QUI
        #
        # LA PARTE SOTTOSTANTE e' gia' REALIZZATA E NON VA MODIFICATA, non importa analizzarla;
        # si occupa di "catturare" le pedine avversarie e di alternare il giocatore di turno,
        # in modo che la prossima mossa venga attribuita all'altro giocatore
        #
        if self._nextPlayer == self._p1:
            opponent = self._p2
        else:
            opponent = self._p1
        for direction in OthelloGame.DIRECTIONS:
            if self.isGoodDirection(self._nextPlayer, row, column, direction):
                rowdiff = direction[0]
                coldiff = direction[1]
                xrow = row + rowdiff
                xcol = column + coldiff
                while (
                    self.isValidPosition(xrow, xcol)
                    and self._board[xrow][xcol] == opponent
                ):
                    self._board[xrow][xcol] = self._nextPlayer
                    xrow += rowdiff
                    xcol += coldiff
        self.switchPlayer()

    ## Restituisce una stringa contenente la visualizzazione dell'intera scacchiera di gioco,
    #  con il suo contenuto.
    #
    #  METODO GIa' REALIZZATO, NON IMPORTA ANALIZZARLO, NON SI PUo' MODIFICARE
    def __str__(self):
        s = "\n"
        if self._size < 10:
            s += "  "
            for i in range(self._size):
                s += str(i)
            s += "\n "
        s += (self._size + 2) * "-" + "\n"
        for row in range(self._size):
            if self._size < 10:
                s += str(row)
            s += "|"
            for column in range(self._size):
                s += str(self._board[row][column])
            s += "|\n"
        if self._size < 10:
            s += " "
        s += (self._size + 2) * "-" + "\n"
        return s


########################### IMPORTANTE ##########################
VERBOSE = False  #  Assegnando True a questa costante si ottengono maggiori informazioni dal collaudo (utile se non ha successo)

"""
   La parte sottostante effettua alcuni collaudi del codice.
   Non e' necessario analizzarla.
   Potete aggiungere altri collaudi ma, prima di consegnare, commentateli.
   
"""

INPUT_MESSAGE = "\nPremere ENTER/INVIO per proseguire\n"


def error():
    print("Collaudo non riuscito")


def main():
    P1 = "X"
    P2 = "O"
    EMPTY = " "
    if not VERBOSE:
        print(
            "\nAssegnando True alla costante VERBOSE (prima di def main()) si ottengono maggiori informazioni"
        )
    print("\nCollaudo Fase 1")
    game = OthelloGame(8, P1, P2, EMPTY, tuple())
    if VERBOSE:
        print(game)
    invalidMoves = ((0, 0), (7, 7), (0, 3))
    for move in invalidMoves:
        game = OthelloGame(8, P1, P2, EMPTY, tuple())
        try:
            game.move(move[0], move[1])
            if VERBOSE:
                print(
                    "La mossa (%d, %d) e' stata erroneamente ritenuta valida per il giocatore %s"
                    % (move[0], move[1], P1)
                )
            error()
        except ValueError:
            if VERBOSE:
                print(
                    "La mossa (%d, %d) e' stata correttamente ritenuta non valida per il giocatore %s"
                    % (move[0], move[1], P1)
                )
        if VERBOSE:
            input(INPUT_MESSAGE)
    print("\nCollaudo Fase 2")
    game = OthelloGame(8, P1, P2, EMPTY, tuple())
    moves = (
        (4, 5, P1, P1, 4, P2, 1),
        (3, 5, P2, P1, 3, P2, 3),
        (2, 3, P1, P1, 6, P2, 1),
        (3, 2, P2, P1, 4, P2, 4),
        (4, 1, P1, P1, 6, P2, 3),
        (1, 3, P2, P1, 5, P2, 5),
        (0, 3, P1, P1, 9, P2, 2),
    )
    for x in moves:
        if VERBOSE:
            print(game)
        if VERBOSE:
            print(
                "Facendo la mossa (riga=%d, colonna=%d) con il giocatore %s si deve ottenere il conteggio (%s=%d, %s=%d)"
                % x
            )
        game.move(x[0], x[1])
        counts = game.getDiskCounts()
        if VERBOSE:
            print(game)
        if VERBOSE:
            print("Conteggio ottenuto: (%s=%d, %s=%d)" % (P1, counts[0], P2, counts[1]))
        if counts[0] != x[4] or counts[1] != x[6]:
            error()
        if VERBOSE:
            input(INPUT_MESSAGE)
    print("\nCollaudo Fase 3")
    tieGames = (
        (
            "OOOOOOOO",
            "OOOOOOOO",
            "OOOOOOOO",
            "OOOOOOO ",
            "OOOOOO  ",
            "OOOOOO X",
            "OOOOOOO ",
            "OOOOOOOO",
        ),
        (
            " XXXXXXX",
            " OOOOO X",
            "OOOOOOOX",
            "OOOOOOOX",
            "OOOOOOOX",
            "OOOOOOOX",
            "OOOOOOOX",
            " OOOOO  ",
        ),
        (
            "    O   ",
            "    OO  ",
            "OOOOOOOX",
            "  OOOO X",
            "  OOO  X",
            "        ",
            "        ",
            "        ",
        ),
    )
    for tie in tieGames:
        game = OthelloGame(8, P1, P2, EMPTY, tie)
        if VERBOSE:
            print(
                "Questa situazione deve essere identificata come una partita terminata per l'assenza di mosse valide"
            )
        if VERBOSE:
            print(game)
        if not game.isFinished():
            error()
        elif VERBOSE:
            print("Identificazione corretta")
        if VERBOSE:
            input(INPUT_MESSAGE)
    print("\nCollaudo Fase 4")
    random.seed(123456)
    game = OthelloGame(8, P1, P2, EMPTY, tuple())
    if VERBOSE:
        print("\nSvolgimento di una partita completa\n")
    if VERBOSE:
        print(game)
    while not game.isFinished():
        move = game.getRandomMove()
        if VERBOSE:
            input(INPUT_MESSAGE)
        if move == None:
            if VERBOSE:
                print("Il giocatore non puo' effettuare alcuna mossa")
            game.passMove()
        else:
            if VERBOSE:
                print("Mossa: ", move)
            game.move(move[0], move[1])
        if VERBOSE:
            print(game)
        if VERBOSE:
            print("Punteggio: ", game.getDiskCounts())
    counts = game.getDiskCounts()
    if counts[0] != 36 or counts[1] != 28:
        error()
    if game.getWinner() != P1:
        error()

    print(
        "\nSe qui sopra non ci sono errori, il collaudo ha avuto successo (ma possono comunque esserci errori nel codice)"
    )


main()

