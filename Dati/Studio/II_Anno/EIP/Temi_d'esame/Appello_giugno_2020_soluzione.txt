"""

   Esame di Elementi di Informatica e Programmazione - 29/06/2020
   
   TEMPO A DISPOSIZIONE = 120 minuti (due ore)

   PRIMA CONSEGNA PARZIALE DOPO 40 minuti (il docente avvisera')

   SECONDA CONSEGNA PARZIALE DOPO 80 minuti (il docente avvisera') 

   Copiare questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola. Se il cognome contiene spazi o apostrofo,
   ignorarli; se contiene lettere accentate, usare la corrispondente lettera
   non accentata.   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.
   
   Il file iniziale usa SOLTANTO SPAZI per l'indentazione:
   vi consiglio di disabilitare l'uso di caratteri di tabulazione
   nell'editor o di trasformarli in spazi.

   LA COMPRENSIONE DEL TESTO E' PARTE INTEGRANTE DELL'ESAME   
   Non e' possibile utilizzare caratteristiche del linguaggio che non siano
   state presentate a lezione in questo anno accademico.
   
   Le sezioni di codice mancante e da scrivere sono identificate dal commento
   # SCRIVERE QUI 
   Le funzioni e i metodi "vuoti" sono costituiti dal solo enunciato pass,
   in modo che la compilazione vada a buon fine. Tali enunciati possono essere
   rimossi quando si scrive la funzione o il metodo (ma possono anche rimanere
   al loro posto, sono ininfluenti)

*** DESCRIZIONE DEL TEMA D'ESAME **********************

Un multi-insieme e' una struttura dati simile a un insieme, nel quale,
pero', ciascun elemento presente puo' avere una molteplicita' anche
diversa da uno e tale molteplicita' e' significativa.
In alternativa, un multi-insieme puo' essere visto come una lista
nella quale la posizione degli elementi non e' significativa
(ma la molteplicita' di ciascun elemento lo e', come in tutte le liste).

Ad esempio, un multi-insieme potrebbe contenere
"due mele, tre prugne e un cocomero"
mentre un insieme potrebbe soltanto contenere
"mele, prugne e cocomeri, in numero imprecisato"
e una lista potrebbe contenenere
"una mela in posizione zero, una prugna in posizione uno,
una mela in posizione due, e cosi' via"

Viene richiesto di progettare la classe MultiSet, i cui esemplari abbiano
il comportamento di un multi-insieme realizzato mediante un dizionario in
cui gli elementi del multi-insieme sono le chiavi (di qualsiasi tipo, anche se
in questo esempio saranno stringhe) e le loro molteplicita' sono i valori
associati alle chiavi che, quindi, sono dei numeri interi positivi.
Se un elemento NON e' presente nel multi-insieme, nel dizionario NON ci sara'
una chiave uguale a quell'elemento (in alternativa potrebbe essere una chiave
associata alla molteplicita' zero, ma non in questa implementazione).
Quindi, se nel dizionario e' presente una determinata chiave, questa sara' 
presente nel multi-insieme con molteplicita' diversa da zero, e viceversa.

I metodi da realizzare nella classe sono gia' indicati, con commenti adeguati
per specificarne il comportamento. Nella classe vanno anche realizzati alcuni
metodi di classe, anch'essi specificati nei commenti.

E' poi presente il metodo main(), gia' scritto, che effettua il collaudo e
utilizza alcune funzioni ausiliarie che vanno realizzate come indicato
(al di fuori della classe).
  
Come riferimento, la mia soluzione prevede
la scrittura di 47 righe di codice.

Buon lavoro!

*** FINE DELLE ISTRUZIONI INIZIALI, ORA COMINCIANO LE FUNZIONI E LA CLASSE ***

"""

"""
   Questa funzione deve creare un multi-insieme vuoto e riempirlo con i dati   
   contenuti nella stringa ricevuta come argomento, per poi, infine, restituire
   tale multi-insieme.
   La stringa viene scomposta in "parole", definite come sequenze di lettere 
   dell'alfabeto consecutive; i separatori tra le parole sono, quindi, sequenze
   di caratteri diversi da lettere, di qualunque lunghezza (maggiore di zero).
   Prima o dopo la suddivisione in parole, le lettere vanno convertite in minuscolo,
   prima di essere inserite nel multi-insieme.
   Ogni parola cosi' individuata va inserita nel multi-insieme, usando il suo
   metodo add.
   Dipendentemente dalla modalita' con cui si separano le parole, possono crearsi
   delle parole che, in realta', sono stringhe vuote: queste NON vanno inserite
   nel multi-insieme.
   Se l'argomento ricevuto non e' una stringa, la funzione deve sollevare
   l'eccezione ValueError (eventualmente con un messaggio esplicativo).
   Se, invece, l'argomento ricevuto e' una stringa che non contiene alcuna parola,
   la funzione deve restituire coerentemente un multi-insieme vuoto.
"""


def wordCounts(text):
    # SCRIVERE QUI
    if not isinstance(text, str):
        raise ValueError("In wordCounts(), text argument is not a string")
    m = MultiSet()
    from re import split

    words = split("[^a-z]+", text.lower())
    for word in words:
        if len(word) > 0:
            m.add(word)
    return m


"""
   Questa funzione legge il file di testo di nome filename e inserisce
   il suo intero contenuto, senza alcuna modifica, in una stringa, che va poi
   passata come argomento alla funzione wordCounts; questa funzione restituisce,
   poi, l'oggetto restituito da wordCounts.
   Non fa alcuna gestione d'errore sull'argomento ricevuto (quindi, ad esempio,
   se non esiste un file con quel nome, solleva un'eccezione).
"""


def countWordsInFile(filename):
    # SCRIVERE QUI
    f = open(filename)
    text = f.read()
    f.close()
    return wordCounts(text)


"""
   Gli esemplari di questa classe rappresentano multi-insiemi (descritti
   nel commento iniziale di questo file) usando un dizionario.
"""


class MultiSet:

    """
    Crea un multi-insieme vuoto.
    L'UNICA variabile di esemplare deve essere un dizionario,
    con chiavi di qualsiasi tipo (saranno gli elementi del multi-insieme)
    e valori di tipo intero positivo
    (la molteplicita' dell'elemento corrispondente).
    """

    def __init__(self):
        self._data = dict()
        # QUESTO METODO/COSTRUTTORE NON PUO' ESSERE MODIFICATO

    """
      La stringa che rappresenta il contenuto di un multi-insieme coincide con
      la stringa che rappresenta il suo dizionario.
      Es. {'american': 1, 'fairy': 3, 'frank': 2, 'gutenberg': 1, 'title': 1}
   """

    def __str__(self):
        # SCRIVERE QUI
        return str(self._data)

    """
      La dimensione di un multi-insieme e' il numero di chiavi del suo dizionario.
   """

    def __len__(self):
        # SCRIVERE QUI
        return len(self._data)

    """
      Questo metodo restituisce il numero complessivo di elementi presenti nel
      multi-insieme, ciascuno contato con la propria molteplicita'.
      Es. {'american': 1, 'fairy': 3, 'frank': 2, 'gutenberg': 1, 'title': 1}
      il metodo deve restituire 8, mentre il metodo
      __len__ restituisce 5 (perche' gli elementi distinti sono 5).
   """

    def countAll(self):
        # SCRIVERE QUI
        sum = 0
        for key in self._data:
            sum += self._data[key]
        return sum

    """
      Rende vuoto il multi-insieme.
   """

    def clean(self):
        # SCRIVERE QUI
        self._data = dict()

    """
      Restituisce la molteplicita' dell'argomento elem all'interno
      del multi-insieme. Se elem non e' presente, non si verifica un
      errore: viene semplicemente e correttamente restituito zero.
   """

    def get(self, elem):
        # SCRIVERE QUI
        return self._data.get(elem, 0)

    """
      Aggiunge l'argomento elem al multi-insieme, con molteplicita' aggiuntiva
      uguale a count (default: count=1)
      Se elem era gia' presente nel multi-insieme con molteplicita' x, dopo
      l'esecuzione del metodo sara' presente con molteplicita' x + count.
      Se elem non era presente nel multi-insieme, dopo l'esecuzione del metodo
      sara' presente con molteplicita' count.
      L'argomento count deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
   """

    def add(self, elem, count=1):
        # SCRIVERE QUI
        if not isinstance(count, int) or count < 1:
            raise ValueError("In add(), invalid count argument: " + str(count))
        self._data[elem] = count + self._data.get(elem, 0)

    """
      Elimina dal multi-insieme count occorrenze di elem (default: count=1)
      Se count e' maggiore della molteplicita' di elem (che potrebbe anche essere zero,
      se e' assente dal multi-insieme), viene sollevata l'eccezione ValueError,
      altrimenti dopo l'esecuzione del metodo la molteplicita' di elem nel
      multi-insieme sara' diminuita di count.
      L'argomento count deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
   """

    def remove(self, elem, count=1):
        # SCRIVERE QUI
        if not isinstance(count, int) or count < 1:
            raise ValueError("In remove(), invalid count argument: " + str(count))
        if self._data.get(elem, 0) < count:
            raise ValueError("In remove(), count too high:", count)
        self._data[elem] -= count
        if self._data[elem] == 0:
            self._data.pop(elem)

    """
      Elimina elem dal multi-insieme. Indipendentemente dalla molteplicita' che
      aveva elem nel multi-insieme prima dell'esecuzione del metodo (eventualmente
      anche zero), dopo l'esecuzione del metodo elem sara' assente dal multi-insieme.
      Il metodo non deve mai lanciare eccezioni.
   """

    def destroy(self, elem):
        # SCRIVERE QUI
        if elem in self._data:
            self._data.pop(elem)

    """
      Il metodo deve eliminare (usando il metodo destroy) dal multi-insieme tutti e soli
      gli elementi che hanno molteplicita' inferiore all'argomento minCount.
      L'argomento minCount deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
      ATTENZIONE: e' proibito eliminare elementi da un dizionario sul quale si sta
      facendo una scansione (durante l'esecuzione si ottiene un messaggio
      d'errore)... se serve, trovare una soluzione funzionante.
   """

    def removeFewerThan(self, minCount):
        # SCRIVERE QUI
        if not isinstance(minCount, int) or minCount < 1:
            raise ValueError(
                "In removeFewerThan(), invalid minCount argument: " + str(minCount)
            )
        for key in list(self._data.keys()):
            if self._data[key] < minCount:
                self.destroy(key)

    """
      Il metodo restituisce una lista contenente (in ordine imprecisato) le chiavi
      del dizionario che rappresenta il multi-insieme.
   """

    def getElements(self):
        # METODO GIà FATTO, NON MODIFICARE
        return list(self._data.keys())

    """
      Questo metodo DI CLASSE (non ha il parametro self...) riceve due multi-insiemi
      e, SENZA MODIFICARLI, costruisce un nuovo multi-insieme che sia l'unione dei due.
      L'unione tra due multi-insiemi e' un multi-insieme che ha come elementi tutti e
      soli gli elementi che appartengono ad almeno uno dei due multi-insiemi, con
      molteplicita' uguale alla somma delle molteplicita' dell'elemento nei due 
      multi-insiemi.
      Se almeno uno dei due argomenti ricevuti non e' un multi-insieme, solleva
      l'eccezione ValueError.
      Il metodo NON può accedere alla variabile di esemplare _data dei multi-insiemi
      ricevuti: può soltanto usare i metodi di esemplare dei multi-insiemi.
   """

    def union(multi1, multi2):
        # METODO GIà FATTO, NON MODIFICARE
        if not isinstance(multi1, MultiSet):
            raise ValueError("In union(), invalid argument: " + str(multi1))
        if not isinstance(multi2, MultiSet):
            raise ValueError("In union(), invalid argument: " + str(multi2))
        m = MultiSet()
        for key in multi1.getElements():
            m.add(key, multi1.get(key))
        for key in multi2.getElements():
            m.add(key, multi2.get(key))
        return m

    """
      Questo metodo DI CLASSE (non ha il parametro self...) riceve due multi-insiemi
      e, SENZA MODIFICARLI, costruisce un nuovo multi-insieme che sia l'intersezione dei due.
      L'intersezione tra due multi-insiemi e' un multi-insieme che ha come elementi tutti e
      soli gli elementi che appartengono ad entrambi i multi-insiemi, con
      molteplicita' uguale alla molteplicita' minima dell'elemento nei due multi-insiemi.
      Se almeno uno dei due argomenti ricevuti non e' un multi-insieme, solleva
      l'eccezione ValueError.
      Il metodo NON può accedere alla variabile di esemplare _data dei multi-insiemi
      ricevuti: può soltanto usare i metodi di esemplare dei multi-insiemi.
   """

    def intersection(multi1, multi2):
        # SCRIVERE QUI
        if not isinstance(multi1, MultiSet):
            raise ValueError("In intersection(), invalid argument: " + str(multi1))
        if not isinstance(multi2, MultiSet):
            raise ValueError("In intersection(), invalid argument: " + str(multi2))
        m = MultiSet()
        for key in multi1.getElements():
            if multi2.get(key) != 0:
                m.add(key, min(multi1.get(key), multi2.get(key)))
        return m


def main():
    # QUI NON SI POSSONO FARE MODIFICARE
    # (eventualmente si possono fare modifiche temporanee, ma poi
    #  bisogna ripristinare la funzione al suo contenuto originario)
    filename1 = "file1.txt"
    filename2 = "file2.txt"
    failed = False
    m1 = countWordsInFile(filename1)
    m2 = countWordsInFile(filename2)
    print(m2)
    m3 = MultiSet.union(m1, m2)
    m4 = MultiSet.intersection(m1, m2)
    print(m4)
    if (
        m1.countAll() != 35510
        or len(m1) != 4395
        or m2.countAll() != 16
        or m3.countAll() != 35526
        or len(m3) != 4395
    ):
        failed = True
        print("fail 1")
    m4.remove("american", 1)
    print(m4)
    if m4.countAll() != 15:
        failed = True
        print("fail 2")

    m4.destroy("tales")
    if m4.countAll() != 13:
        failed = True
        print("fail 3")

    m4.destroy("the")
    m4.destroy("of")
    m4.destroy("by")
    m4.destroy("l")
    m4.destroy("baum")
    if m4.countAll() != 8:
        failed = True
        print("fail 4")
    m4.removeFewerThan(2)
    if m4.countAll() != 2:
        failed = True
        print("fail 5")
    m4.remove("fairy")
    if m4.countAll() != 1:
        failed = True
        print("fail 6")
    m4.remove("fairy")
    if len(m4) != 0:
        failed = True
        print("fail 7")
    try:
        m4.remove("DALPASSO")
        failed = True
        print("fail 8")
    except ValueError:
        pass
    try:
        m4.destroy("DALPASSO")
    except:
        failed = True
        print("fail 9")

    if failed:
        print("\nCollaudo NON riuscito\n")
    else:
        print(
            "\nCollaudo riuscito (ovviamente non significa che non ci siano errori...)\n"
        )


main()
