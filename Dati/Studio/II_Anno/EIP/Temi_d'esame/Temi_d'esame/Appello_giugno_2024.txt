"""
   ELEMENTI DI INFORMATICA E PROGRAMMAZIONE

   ***********   TEMPO A DISPOSIZIONE: due ore (120 minuti)

   COPIARE questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola.
   Se il cognome contiene spazi, apostrofo o altri caratteri non alfabetici, ignorarli;
   se contiene lettere accentate, usare la corrispondente lettera non accentata.
   Usare SOLO IL COGNOME, senza il nome, seguito dal numero di matricola.
   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.
   
   LA COMPRENSIONE DEL TESTO E' PARTE INTEGRANTE DELL'ESAME.
      
   Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
   Le sezioni mancanti e da scrivere sono identificate dal commento # SCRIVERE QUI
   e # FINE SCRIVERE QUI
   
   Gli enunciati "pass" presenti nel codice, all'interno delle sezioni che vanno
   completate, servono a fare in modo che non ci siano errori di sintassi prima che
   il vostro codice venga scritto: lasciateli dove sono, sono istruzioni "nulle",
   non eseguono niente.
   
   ATTENZIONE: nel codice gia' presente NON sono stati utilizzati caratteri di tabulazione
   per l'indentazione, sono tutti spazi singoli e si consiglia di fare altrettanto.
      
   Una possibile soluzione prevede la scrittura di circa 42
   righe di codice, oltre a quelle gia' presenti.

### Descrizione del progetto

Si ha l'obiettivo di analizzare un certo numero di trasferimenti di denaro,
sotto forma di bonifici bancari, per ricavarne opportuni rapporti riassuntivi.

Ciascun bonifico è descritto dai seguenti parametri (nell'ordine):
1) data, nel formato anno/mese/giorno (anno, mese e giorno sono numeri interi positivi)
2) causale, cioè la motivazione del trasferimento di denaro (una stringa)
3) importo, si sottintende in euro (per semplicità, un numero intero positivo)
4) conto "sorgente", da cui viene prelevato il denaro (una stringa)
5) conto "destinazione", dove viene accreditato il denaro (una stringa)

Tutti i parametri relativi a un singolo bonifico si trovano in un'unica riga di un file di testo,
separati tra loro da un singolo carattere "|", come in questo esempio,
che descrive un bonifico che fa aumentare di 20 euro il saldo del "contoY" (destinazione),
facendo diminuire di 20 euro il saldo del "contoX" (sorgente), ed è stato eseguito
il 17 marzo 2024 con la causale "Iscrizione Paperino":

    2024/03/17|Iscrizione Paperino|20|contoX|contoY

Quindi, queste righe sono costituite dai 5 campi che definiscono le caratteristiche di
un bonifico, separati tra loro da un carattere "|".    
Per semplicità, le stringhe che descrivono la causale e i due conti NON
contengono mai il carattere separatore "|".

ATTENZIONE: il saldo di un conto (cioè il risultato delle operazioni di addebito
e accredito che lo riguardano) può essere negativo!

I bonifici da analizzare sono archiviati in un file di testo ("movimenti.txt"),
che viene generato automaticamente dal programma di collaudo e che non va modificato
a mano.

ATTENZIONE: si consiglia di completare le funzioni e i metodi nell'ordine
in cui si presentano in questo file (anche se non è strettamente necessario),
perché questo è l'ordine in cui vengono collaudati.

"""

# Questa funzione controlla se la stringa ricevuta contiene il numero
# `expected_num` di campi separati dal carattere "|".
# Restituisce True in caso positivo e False altrimenti.
# Viene utilizzata in fase di validazione del file di input.
#
# SUGGERIMENTO: il metodo `count` delle stringhe restituisce 
# il numero di occorrenze della sottostringa data. Ad esempio 
#
#    "axbxc".count("x")
#
# restituisce 2.
#
# Si ipotizzi che i parametri ricevuti abbiano tipo e valore corretti,
# senza controllare.
#
def check_field_number(row_string, expected_num):
    # SCRIVERE QUI
    pass
    # FINE SCRIVERE QUI


# Restituisce True se e solo se la stringa data è in formato YYYY/MM/DD,
# dove YYYY è l'anno (con 4 cifre), MM è il mese (con 2 cifre) e DD è il 
# giorno (con due cifre)
#
# ATTENZIONE: **non** è richiesto di controllare che i valori che definiscono la data
# siano validi! La stringa 2024/42/38 soddisfa i requisiti di questa funzione
# pur non essendo una data possibile.
#
# SUGGERIMENTO: utilizzate le righe già scritte come esempio.
#
# Si ipotizzi che il parametro ricevuto abbia tipo corretto,
# senza controllare.
#
def is_date_format(date_str):
    if len(date_str) != 10:
        return False
    if not date_str[0:4].isdigit():
        return False
    if date_str[4] != "/":
        return False
    # SCRIVERE QUI
    pass
    # FINE SCRIVERE QUI


# Stampa gli elmenti del dizionario ricevuto, uno per riga, in ordine
# di chiave crescente in senso lessicografico.
#
# Ad esempio, il dizionario
#
#    {"conto2": -80, "conto1": 2000}
#
# deve essere stampato come segue:
#
#    conto1 2000
#    conto2 -80
#
# SUGGERIMENTO: ricordate che dictionary.keys() restituisce le chiavi del dizionario
# dictionary e che la funzione sorted restituisce una copia ordinata della collezione
# che riceve come parametro.
#
# Si ipotizzi che il parametro ricevuto abbia tipo corretto,
# senza controllare.
#
def print_dictionary_by_key(dictionary):
    # SCRIVERE QUI
    pass
    # FINE SCRIVERE QUI


# A partire dalla stringa ricevuta, `row_string`, costruisce e restituisce
# un dizionario rappresentante il bonifico descritto da row_string.
#
# La stringa ha il formato già descritto.
# Se la stringa ricevuta non contiene un numero corretto di campi,
# solleva un'eccezione ValueError con il messaggio appropriato
# (per la verifica, usare la funzione check_field_number).
# Lo stesso deve accadere se il primo campo non è in formato data
# (usare la funzione is_date_format per verificarlo).
#
# Si ipotizzi che il parametro ricevuto abbia tipo corretto,
# senza controllare.
#
def parse_row(row_string):
    if not check_field_number(row_string, 5):
        raise ValueError("La stringa fornita non è valida: " + row_string)
    fields = row_string.split("|")
    # Controllare se il primo elemento di fields è una data, usando la funzione
    # is_date_format definita sopra. In caso negativo, sollevare un'eccezione
    # ValueError.
    # SCRIVERE QUI
    pass
    # FINE SCRIVERE QUI
    #
    # ATTENZIONE: i nomi delle chiavi usati qui sotto andranno (ovviamente)
    #               utilizzati anche in seguito
    #
    return {
        "data": fields[0],
        "causale": fields[1],
        "importo": int(fields[2]),
        "sorgente": fields[3],
        "destinazione": fields[4],
    }


# Questa è la classe principale del programma, il cui scopo è quello di
# rappresentare un elenco di bonifici da elaborare.
# La variabile di esemplare self.transactions contiene la lista di bonifici
# letta dal file fornito al costruttore, per poi elaborarli.
# Ciascun bonifico è rappresentato, in tale lista, da un dizionario,
# così come viene restituito dalla funzione parse_row vista in precedenza.
class RegistroBonifici:

    # Inizializza una nuova istanza utilizzando i bonifici contenuti nel
    # file di cui riceve il nome.
    # Si ipotizzi che il parametro ricevuto abbia tipo corretto,
    # senza controllare.
    def __init__(self, file_path):
        self.transactions = []
        fp = open(file_path, "r")
        for line in fp.readlines():
            line = line.strip()
            if len(line) > 0:
                # Convertite 'line' in dizionario usando la funzione parse_row
                # e aggiungete il dizionario così ottenuto in coda alla lista
                # self.transactions (che è, quindi, una lista di dizionari).
                # SCRIVERE QUI
                pass
                # FINE SCRIVERE QUI
        fp.close()


    # Costruisce e restituisce una lista contenente la "storia" delle attività
    # riguardanti UNO SPECIFICO CONTO (quello ricevuto come parametro),
    # a partire dalle informazioni contenute in self.transactions.
    # Tale lista dovrà contenere un elemento per ciascun bonifico che riguarda
    # il conto in esame, nel ruolo di conto sorgente oppure di conto 
    # destinazione del bonifico. I bonifici che non riguardano il conto in esame
    # non entrano a far parte della lista in costruzione.
    #
    # Per ciascun bonifico di cui il conto in esame rappresenta il conto SORGENTE,
    # nella lista viene inserita una tupla contenente la data, la causale e l'importo
    # CAMBIATO DI SEGNO, cioè reso negativo, perché il bonifico in effetti rappresenta
    # una diminuzione del saldo di tale conto.
    #
    # Per ciascun bonifico di cui il conto in esame rappresenta il conto DESTINAZIONE,
    # nella lista viene inserita una tupla contenente la data, la causale e l'importo,
    # SENZA CAMBIARNE IL SEGNO, perché il bonifico in effetti rappresenta un incremento
    # del saldo di tale conto.
    #
    # Ad esempio, date le seguenti transazioni:
    #
    #     2024/01/29|Quota lezioni Gennaio Pippo|100|conto2|conto4
    #     2024/01/05|Iscrizione Paperino|20|conto1|conto3
    #     2024/01/04|Iscrizione Paperina|20|conto1|conto2
    #     2024/01/28|Quota lezioni Gennaio Topolino|100|conto4|conto3
    #     2024/02/03|Iscrizione Pluto|30|conto1|conto2
    #
    # la lista riguardante "conto2" deve essere costruita in questo modo
    # (evidentemente, è una lista che contiene 3 tuple, ciascuna con 3 elementi):
    #    [
    #      ("2024/01/29", "Quota lezioni Gennaio Pippo", -100) # osservare: -100
    #      ,
    #      ("2024/01/04", "Iscrizione Paperina", 20)
    #      ,
    #      ("2024/02/03", "Iscrizione Pluto", 30)
    #    ]
    #
    # La lista che viene restituita deve avere le tuple ordinate per data crescente,
    # anche se, come nell'esempio, i bonifici non sono necessariamente ordinati per
    # data crescente nella lista self.transactions. Quindi, la lista restituita sarà:
    #    [
    #      ("2024/01/04", "Iscrizione Paperina", 20)
    #      ,
    #      ("2024/01/29", "Quota lezioni Gennaio Pippo", -100)
    #      ,
    #      ("2024/02/03", "Iscrizione Pluto", 30)
    #    ]
    #
    # Il metodo NON deve modificare la lista self.transactions
    # e non deve visualizzare niente.
    #
    # Si ipotizzi che il parametro ricevuto abbia tipo corretto, senza controllare.
    #
    # Se il conto ricevuto non è presente in self.transactions, il metodo restituirà
    # una lista vuota, senza segnalare errori.
    #
    def account_history(self, account_name):
        # SCRIVERE QUI
        pass
        # FINE SCRIVERE QUI
        
    # Riceve una lista generata dal metodo account_history e ne visualizza il contenuto
    # con print, nel formato indicato qui sotto.
    #
    # Il parametro ricevuto, history, è una lista di tuple aventi 3 elementi (come spiegato
    # nel commento del metodo account_history), ordinate per data crescente.
    # Nel visualizzare ciascuna tupla, bisogna aggiungere, come ultimo elemento della riga,
    # il saldo del conto in esame dopo l'esecuzione di quel bonifico, 
    # a partire dal saldo iniziale uguale a zero.
    #
    # Ad esempio, con la seguente "storia" di un conto (ricevuta come parametro):
    #
    #    [
    #      ("2024/01/04", "Iscrizione Paperina", 20)   # il saldo passa da 0 a 20
    #      ,
    #      ("2024/01/29", "Quota Gennaio Pippo", -100) # il saldo passa da 20 a 20-100 = -80
    #      ,
    #      ("2024/02/03", "Iscrizione Pluto", 30)      # il saldo passa da -80 a -80+30 = -50
    #    ]
    #
    # il metodo deve visualizzare:
    #
    #     2024/01/04 Iscrizione Paperina 20 20
    #     2024/01/29 Quota lezioni Gennaio Pippo -100 -80
    #     2024/02/03 Iscrizione Pluto 30 -50
    #
    # Evidentemente, l'ultimo numero dell'ultima riga visualizzata è il saldo finale
    # del conto, dopo l'esecuzione di tutti i bonifici che lo riguardano.
    #
    # Si ipotizzi che il parametro ricevuto abbia tipo e contenuto corretto,
    # senza controllare.
    #
    # Si osservi che, in realtà, il metodo non ha bisogno di utilizzare il parametro self
    # (per cui potrebbe essere progettato come funzione esterna alla classe)
    #
    def print_account_history(self, history):
        # SCRIVERE QUI
        pass
        # FINE SCRIVERE QUI

    # Costruisce e restituisce un dizionario avente una chiave per ogni conto presente
    # nella lista dei bonifici (self.transactions).
    # Il valore associato a ciascuna di tali chiavi deve essere il saldo di quel conto
    # al termine dell'esecuzione di tutti i bonifici che lo riguardano, con saldo
    # iniziale uguale a zero.
    #
    # In particolare, questo metodo deve:
    #
    # 1) costruire l'insieme (accounts) dei conti presenti in self.transactions
    #
    # 2) creare un dizionario vuoto (balances), che verrà popolato e restituito
    #
    # 3) per ogni conto di accounts:
    #
    #   a) invocare il metodo account_history, memorizzando la lista ricevuta
    #
    #   b) analizzare tale "storia" e calcolare il saldo finale del conto, con lo
    #      stesso algoritmo già descritto nel metodo print_account_history
    #      (ma senza visualizzare niente...)
    #
    #   c) aggiungere a balances una coppia avente come chiave il conto in esame
    #      e come valore il saldo appena calcolato
    #
    # 4) restituire il dizionario balances 
    #
    # Il metodo NON deve modificare la lista self.transactions
    # e non deve visualizzare niente.
    #
    def balance(self):
        # SCRIVERE QUI
        pass
        # FINE SCRIVERE QUI
        
# FINE CLASSE RegistroBonifici

################################################################################
#
# Collaudo
#
# Il codice di seguito collauda il programma. Potete scrivere vostri
# eventuali collaudi nella funzione `collaudo_custom`.
# Non è necessario analizzare il codice presente in questa sezione finale del testo,
# che, tra l'altro, utilizza funzioni/metodi che non sono stati visti a lezione.
#
################################################################################

# questi eventuali collaudi vengono eseguiti PRIMA dei collaudi predisposti 
# dai docenti
def collaudo_custom():
    pass

# Questa è una lista di movimenti di esempio: viene salvata automaticamente nel
# file "movimenti.txt", usato dal collaudo, nel momento in cui il programma viene eseguito.
FILENAME = "movimenti.txt"
MOVIMENTI = """\
2024/01/05|Iscrizione Pippo|20|conto1|conto2
2024/01/04|Iscrizione Topolino|20|conto1|conto2
2024/01/05|Iscrizione Paperino|20|conto1|conto3
2024/01/04|Iscrizione Paperina|20|conto1|conto2
2024/01/29|Quota lezioni Gennaio Pippo|100|conto4|conto2
2024/01/28|Quota lezioni Gennaio Topolino|100|conto4|conto3
2024/01/27|Quota lezioni Gennaio Paperino|100|conto4|conto2
2024/01/29|Quota lezioni Gennaio Paperina|100|conto4|conto3
2024/02/23|Quota lezioni Febbraio Pippo|100|conto4|conto2
2024/02/24|Quota lezioni Febbraio Topolino|100|conto4|conto3
2024/02/23|Quota lezioni Febbraio Paperino|100|conto4|conto2
2024/02/24|Quota lezioni Febbraio Paperina|100|conto4|conto3
2024/03/32|Quota lezioni Marzo Pippo|100|conto4|conto2
2024/03/26|Quota lezioni Marzo Topolino|100|conto4|conto3
2024/03/27|Quota lezioni Marzo Paperino|100|conto4|conto2
2024/03/28|Quota lezioni Marzo Paperina|100|conto4|conto3
2024/04/28|Quota lezioni Aprile Pippo|100|conto4|conto2
2024/04/27|Quota lezioni Aprile Topolino|100|conto4|conto3
2024/04/28|Quota lezioni Aprile Paperino|100|conto4|conto2
2024/04/24|Quota lezioni Aprile Paperina|100|conto4|conto3
2024/05/24|Quota lezioni Maggio Pippo|100|conto4|conto2
2024/05/22|Quota lezioni Maggio Topolino|100|conto4|conto3
2024/05/24|Quota lezioni Maggio Paperino|100|conto4|conto2
2024/05/21|Quota lezioni Maggio Paperina|100|conto4|conto3
2024/06/26|Quota lezioni Giugno Pippo|100|conto4|conto2
2024/06/28|Quota lezioni Giugno Topolino|100|conto4|conto3
2024/06/25|Quota lezioni Giugno Paperino|100|conto4|conto2
2024/06/29|Quota lezioni Giugno Paperina|100|conto4|conto3
2024/06/30|Deposito contanti|1220|conto3|conto2
2024/06/30|Pagamento insegnante Johann Sebastian Bach|1200|conto2|conto5
2024/06/30|Pagamento insegnante Clara Schumann|1200|conto2|conto5
"""
# Scrive nel file "movimenti.txt" il contenuto della stringa MOVIMENTI
# definita all'inizio
#
def write_movimenti():
    with open(FILENAME, "w") as fp: print(MOVIMENTI, file=fp)
        
# Ognuna delle seguenti funzioni restituisce una tupla con due valori:
# il numero di test falliti e il numero di test effettuati
# In caso di errore, ciascuna funzione visualizza un messaggio opportuno.

def test_check_field_number():
    print("Collaudo della funzione check_field_number...")
    NUM_FIELDS = 5
    cases = [
        ("2024/05/12|Prova|100|conto1|conto2", True),      # OK
        ("2024/05/12|100|conto1|conto2", False),           # manca un campo
        ("2024/05/12|Prova|100|conto1|conto2|xxx", False), # troppi campi
    ]
    failed = 0
    total = 0
    for s, expected in cases:
        total += 1
        res = check_field_number(s, NUM_FIELDS)
        if res != expected:
            failed += 1
            print(
                "ERRORE: check_field_number(%s, %d) restituisce %s anziché %s"
                % (repr(s), NUM_FIELDS, res, expected)
            )
    return failed, total
        
def test_is_date_format():
    print("Collaudo della funzione is_date_format...")
    cases = [
        ("2024/05/10", True),
        ("2023/41/12", True),
        ("2023/1/12", False),
        ("202a/11/12", False),
        ("20/11/12", False),
        ("2010/11/123", False),
        ("2010/11/12a", False),
        ("2010|11/12", False),
    ]
    failed = 0
    total = 0
    for s, expected in cases:
        total += 1
        res = is_date_format(s)
        if res != expected:
            failed += 1
            print(
                "ERRORE: `is_date_format(%s)` restituisce %s anziché %s"
                % (repr(s), res, expected)
            )
    return failed, total
    
def test_print_dictionary_by_key():
    print("Collaudo della funzione print_dictionary_by_key...")
    import sys
    from io import StringIO
    import textwrap

    cases = [
        (
            {"conto1": 1000, "conto2": 100},
            """\
            conto1 1000
            conto2 100
            """,
        ),
        (
            {"conto2": 100, "conto1": 1000},
            """\
            conto1 1000
            conto2 100
            """,
        ),
    ]
    failed = 0
    total = 0
    for d, expected in cases:
        expected = textwrap.dedent(expected)
        total += 1
        capture = StringIO()
        oldout = sys.stdout
        sys.stdout = capture
        print_dictionary_by_key(d)
        sys.stdout = oldout
        res = capture.getvalue()
        if res != expected:
            failed += 1
            print(
                "ERRORE: `print_dictionary_by_key(%s)` deve visualizzare \n\n%s\nma visualizza \n\n%s"
                % (repr(d), expected, res)
            )
    return failed, total

def test_parse_row():
    print("Collaudo della funzione parse_row...")
    cases = [
        (
            "2024/06/25|Quota lezioni Giugno Pinco Pallino|100|conto1|conto2",
            {
                "data": "2024/06/25",
                "causale": "Quota lezioni Giugno Pinco Pallino",
                "importo": 100,
                "sorgente": "conto1",
                "destinazione": "conto2",
            },
        )
    ]
    # questi casi devono sollevare un'eccezione
    failing_cases = [
        "2024/06/25|100|conto1|conto2",
        "2024/06/e5|Quota lezioni Giugno Pinco Pallino|100|conto1|conto2",
    ]
    failed = 0
    total = 0
    for s, expected in cases:
        total += 1
        try:
            res = parse_row(s)
            if res != expected:
                failed += 1
                print(
                    "ERRORE: `parse_row(%s)` deve restituire \n\n%s,\n\nma restituisce \n\n%s"
                    % (repr(s), expected, res)
                )
        except:
            failed += 1
            print(
                "ERRORE: `parse_row(%s)` deve restituire \n\n%s,\n\nma ha sollevato un'eccezione"
                % (repr(s), expected)
            )

    for s in failing_cases:
        total += 1
        try:
            res = parse_row(s)
            failed += 1
            print(
                "ERRORE: `parse_row(%s)` deve sollevare un'eccezione ma restituisce\n\n%s"
                % (repr(s), res)
            )
        except:
            pass
    return failed, total

def test_init():
    print("Collaudo del metodo __init__...")
    total = 1
    failed = 0
    reg = RegistroBonifici(FILENAME)
    if len(reg.transactions) != len(MOVIMENTI.splitlines()):
        failed += 1
        print(
            'ERRORE: il costruttore RegistroBonifici("movimenti.txt") deve inizializzare `self.register`' +
            ' con tutte le transazioni contenute nel file (%d transazioni)'
            % len(MOVIMENTI.splitlines())
        )
    return failed, total
    
def test_account_history():
    print("Collaudo del metodo account_history...")
    total = 0
    failed = 0

    cases = [
        (
            "conto2",
            [
            ('2024/01/04', 'Iscrizione Paperina', 20),
            ('2024/01/04', 'Iscrizione Topolino', 20),
            ('2024/01/05', 'Iscrizione Pippo', 20),
            ('2024/01/27', 'Quota lezioni Gennaio Paperino', 100),
            ('2024/01/29', 'Quota lezioni Gennaio Pippo', 100),
            ('2024/02/23', 'Quota lezioni Febbraio Paperino', 100),
            ('2024/02/23', 'Quota lezioni Febbraio Pippo', 100),
            ('2024/03/27', 'Quota lezioni Marzo Paperino', 100),
            ('2024/03/32', 'Quota lezioni Marzo Pippo', 100),
            ('2024/04/28', 'Quota lezioni Aprile Paperino', 100),
            ('2024/04/28', 'Quota lezioni Aprile Pippo', 100),
            ('2024/05/24', 'Quota lezioni Maggio Paperino', 100),
            ('2024/05/24', 'Quota lezioni Maggio Pippo', 100),
            ('2024/06/25', 'Quota lezioni Giugno Paperino', 100),
            ('2024/06/26', 'Quota lezioni Giugno Pippo', 100),
            ('2024/06/30', 'Deposito contanti', 1220),
            ('2024/06/30', 'Pagamento insegnante Clara Schumann', -1200),
            ('2024/06/30', 'Pagamento insegnante Johann Sebastian Bach', -1200)
            ]
        )
    ]

    reg = RegistroBonifici(FILENAME)
    for account, expected in cases:
        total += 1
        res = reg.account_history(account)
        if res != expected:
            failed += 1
            print(
                "ERRORE: `account_history(%s)` deve restituire \n\n%s\nma restituisce \n\n%s"
                % (repr(account), expected, res)
            )

    return failed, total
     
def test_print_account_history():
    print("Collaudo del metodo print_account_history...")
    import sys
    import textwrap
    from io import StringIO

    total = 0
    failed = 0

    cases = [
        (
            "conto2",
            """\
    2024/01/04 Iscrizione Paperina 20 20
    2024/01/04 Iscrizione Topolino 20 40
    2024/01/05 Iscrizione Pippo 20 60
    2024/01/27 Quota lezioni Gennaio Paperino 100 160
    2024/01/29 Quota lezioni Gennaio Pippo 100 260
    2024/02/23 Quota lezioni Febbraio Paperino 100 360
    2024/02/23 Quota lezioni Febbraio Pippo 100 460
    2024/03/27 Quota lezioni Marzo Paperino 100 560
    2024/03/32 Quota lezioni Marzo Pippo 100 660
    2024/04/28 Quota lezioni Aprile Paperino 100 760
    2024/04/28 Quota lezioni Aprile Pippo 100 860
    2024/05/24 Quota lezioni Maggio Paperino 100 960
    2024/05/24 Quota lezioni Maggio Pippo 100 1060
    2024/06/25 Quota lezioni Giugno Paperino 100 1160
    2024/06/26 Quota lezioni Giugno Pippo 100 1260
    2024/06/30 Deposito contanti 1220 2480
    2024/06/30 Pagamento insegnante Clara Schumann -1200 1280
    2024/06/30 Pagamento insegnante Johann Sebastian Bach -1200 80
    """,
        )
    ]

    reg = RegistroBonifici(FILENAME)
    for account, expected in cases:
        expected = textwrap.dedent(expected)
        total += 1
        capture = StringIO()
        sys.stdout = capture

        x = reg.account_history(account)
        reg.print_account_history(x)

        sys.stdout = sys.__stdout__
        res = capture.getvalue()
        if res != expected:
            failed += 1
            print(
                "ERRORE: `print_account_history(%s)` deve visualizzare \n\n%s\nma visualizza \n\n%s"
                % (repr(account), expected, res)
            )

    return failed, total

def test_balance():
    print("Collaudo del metodo balance...")
    reg = RegistroBonifici(FILENAME)
    expected = {
        "conto1": -80,
        "conto2": 80,
        "conto3": 0,
        "conto4": -2400,
        "conto5": 2400,
    }
    failed = 0
    total = 1
    res = reg.balance()
    if res != expected:
        failed += 1
        print(
            "ERRORE: `balance()` deve restituire \n\n%s, \n\nma restituisce \n\n%s"
            % (expected, res)
        )
    return failed, total

    
def collaudo():
    failed = 0
    total = 0

    f, t = test_check_field_number()
    failed += f
    total += t
    f, t = test_is_date_format()
    failed += f
    total += t
    f, t = test_print_dictionary_by_key()
    failed += f
    total += t
    f, t = test_parse_row()
    failed += f
    total += t
    f, t = test_init()
    failed += f
    total += t
    f, t = test_account_history()
    failed += f
    total += t
    f, t = test_print_account_history()
    failed += f
    total += t
    f, t = test_balance()
    failed += f
    total += t

    if f > 0:
        print("Test effettuati: %d\nTest falliti: %d" % (total, failed))
    else:
        print("%d collaudi eseguiti con successo!\nIl codice potrebbe comunque contenere errori: controllate bene!" % total)

write_movimenti()
collaudo_custom()
collaudo()
