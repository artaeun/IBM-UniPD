"""

Esame di Elementi di Informatica e Programmazione - Settembre 2023

TEMPO A DISPOSIZIONE = 2 ore (120 minuti)

COPIARE questo file dandogli il nome CognomeMatricola.py,
usando il proprio cognome e il proprio numero di matricola.
Se il cognome contiene spazi o apostrofo, ignorarli; se contiene lettere
accentate, usare la corrispondente lettera non accentata.

MODIFICARE SOLTANTO IL FILE così creato !!!!!!!!
Quello sara' il file valutato per l'esame.

Non e' possibile utilizzare caratteristiche del linguaggio che non
sono state presentate a lezione in questo anno accademico.

ATTENZIONE: e' molto importante rispettare l'incapsulamento tra le classi:
al di fuori di una classe non si puo' accedere, ne' in lettura ne' in scrittura,
alle sue variabili di istanza, lo si puo' fare soltanto attraverso i suoi metodi
(come al solito).

Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
Le sezioni di codice mancante, da scrivere, sono identificate dal commento
# SCRIVERE QUI

E' VIETATO MODIFICARE ALTRE PARTI DEL CODICE O DEFINIRE FUNZIONI/METODI NON RICHIESTI

In generale, e' preferibile il codice mancante nell'ordine in cui compare nel file:
in questo modo si puo' sfruttare al meglio il collaudo presente alla fine,
nel metodo main.

LA COMPRENSIONE DEL TESTO E' PARTE INTEGRANTE DELL'ESAME   

Buon lavoro!

*** DESCRIZIONE DEL TEMA D'ESAME **********************

Un multi-insieme e' una struttura dati simile a un insieme, nel quale,
pero', ciascun elemento presente puo' avere una molteplicita' anche
diversa da uno e tale molteplicita' e' significativa, cioe'
il multi-insieme {1, 2, 2} e' diverso dal multi-insieme {1, 2},
mentre, considerati come insiemi, sono equivalenti.
In alternativa, un multi-insieme puo' essere visto come una lista
nella quale la posizione degli elementi non e' significativa
(ma la molteplicita' di ciascun elemento lo e', come in tutte le liste).
Quindi, ad esempio, il multi-insieme {1, 2, 2} è uguale al multi-insieme  {2, 2, 1}


Ad esempio, un multi-insieme potrebbe contenere
"due mele, tre prugne e un cocomero"
mentre un insieme potrebbe soltanto contenere
"mele, prugne e cocomeri, in numero imprecisato"
e una lista potrebbe contenenere
"una mela in posizione zero, una prugna in posizione uno,
una mela in posizione due, e cosi' via"

Viene richiesto di progettare la classe MultiSet, i cui esemplari abbiano
il comportamento di un multi-insieme realizzato mediante un dizionario in
cui gli elementi del multi-insieme sono le chiavi (di qualsiasi tipo, anche se
in questo compito saranno stringhe) mentre le loro molteplicita' sono i valori
associati alle chiavi che, quindi, sono ovviamente dei numeri interi positivi.
Se un elemento NON e' presente nel multi-insieme, nel dizionario NON ci sara'
una chiave uguale a quell'elemento (in alternativa potrebbe essere una chiave
associata alla molteplicita' zero, ma NON in questa implementazione).
Quindi, se nel dizionario e' presente una determinata chiave, questa sara' 
presente nel multi-insieme con molteplicita' diversa da zero, e viceversa.

I metodi da realizzare nella classe sono gia' indicati, con commenti adeguati
per specificarne il comportamento. Nella classe vanno anche realizzati alcuni
metodi di classe (anche detti "metodi statici"), anch'essi specificati nei commenti.

E' poi presente il metodo main(), gia' scritto, che effettua il collaudo e
utilizza alcune funzioni ausiliarie che vanno realizzate come indicato
(al di fuori della classe).

Buon lavoro!

*** FINE DELLE ISTRUZIONI INIZIALI, ORA COMINCIANO LE FUNZIONI E LA CLASSE ***

"""

"""
   Gli esemplari di questa classe rappresentano multi-insiemi (descritti
   nel commento iniziale di questo file) usando un dizionario.
   ATTENZIONE: in questo esercizio, il multi-insieme viene utilizzato con
   stringhe come elementi, ma la classe progettata deve funzionare con
   elementi di qualsiasi tipo.
"""
class MultiSet:

   """
      Crea un multi-insieme vuoto.
      L'UNICA variabile di esemplare deve essere un dizionario,
      con chiavi di qualsiasi tipo (saranno gli elementi del multi-insieme)
      e valori di tipo intero positivo, che rappresentano
      la molteplicita' dell'elemento corrispondente.
   """
   def __init__(self):
      # METODO GIà FATTO, NON MODIFICARE
      self._data = dict()
     
   """
      La stringa che rappresenta il contenuto di un multi-insieme coincide con
      la stringa che rappresenta il suo dizionario.
      Es. {'american': 1, 'fairy': 3, 'frank': 2, 'gutenberg': 1, 'title': 1}
      @return una stringa che descrive il multi-insieme
   """   
   def __str__(self):
      # METODO GIà FATTO, NON MODIFICARE
      return str(self._data)
            
   """
      Il metodo restituisce una lista contenente (in ordine imprecisato) le chiavi
      del dizionario che rappresenta il multi-insieme.
      @return una lista contenente gli elementi (cioe' le chiavi) presenti nel multi-insieme
   """
   def getElements(self):
      # METODO GIà FATTO, NON MODIFICARE
      return list(self._data.keys())
      
   """
      La dimensione di un multi-insieme e' il numero di chiavi del suo dizionario.
      @return il numero di elementi (cioe' chiavi) presenti nel multi-insieme
   """
   def __len__(self):
      # SCRIVERE QUI 
      return len(self._data)
    
   """
      Questo metodo restituisce il numero complessivo di elementi presenti nel
      multi-insieme, ciascuno contato con la propria molteplicita'.
      Es. {'american': 1, 'fairy': 3, 'frank': 2, 'gutenberg': 1, 'title': 1}
      il metodo deve restituire 8, mentre il metodo
      __len__ restituisce 5 (perche' gli elementi distinti sono 5).
      @return il numero complessivo di elementi presenti nel multi-insieme,
              ciascuno contato con la propria molteplicita'
   """   
   def countAll(self):
      # SCRIVERE QUI 
      sum = 0
      for key in self._data:
         sum += self._data[key]
      """
         alternativa: sommare direttamente i valori del dizionario (senza usare le chiavi)
         for v in self._data.values():
            sum += v
      """
      return sum
      
   """
      Rende vuoto il multi-insieme.
   """
   def clean(self):
      # SCRIVERE QUI 
      self._data = dict()
      # errore frequente (inspiegabile): self._data = 0
      
   """
      Restituisce la molteplicita' dell'argomento elem all'interno
      del multi-insieme. Se elem non e' presente, non si verifica un
      errore: viene semplicemente e correttamente restituito zero.
      @param elem elemento cercato
      @return la molteplicita' dell'argomento cercato (eventualmente zero se e' assente)
   """
   def get(self, elem):
      # SCRIVERE QUI 
      return self._data.get(elem, 0)
      
   """
      Aggiunge l'argomento elem al multi-insieme, con molteplicita' aggiuntiva
      uguale a count (default: count=1)
      Se elem era gia' presente nel multi-insieme con molteplicita' x, dopo
      l'esecuzione del metodo sara' presente con molteplicita' x + count.
      Se elem non era presente nel multi-insieme, dopo l'esecuzione del metodo
      sara' presente con molteplicita' count.
      L'argomento count deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
      @param elem elemento da aggiungere
      @param count molteplicita' con cui elem va aggiunto (1 se non specificato)
   """
   def add(self, elem, count=1):
      # SCRIVERE QUI 
      if not isinstance(count, int) or count < 1:
         raise ValueError("In add(), invalid count argument: " + str(count))
      self._data[elem] = count + self.get(elem)
      
   """
      Elimina dal multi-insieme un numero di occorrenze di elem uguale a count
      (default: count=1)
      Se count e' maggiore della molteplicita' di elem (che potrebbe anche essere zero,
      se e' assente dal multi-insieme), viene sollevata l'eccezione ValueError,
      altrimenti dopo l'esecuzione del metodo la molteplicita' di elem nel
      multi-insieme sara' diminuita di count.
      Se la molteplicita' finale di elem e' zero, tale elemento va rimosso dal
      dizionario.
      L'argomento count deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
      @param elem elemento da rimuovere
      @param count molteplicita' con cui elem va rimosso (1 se non specificato)
   """
   def remove(self, elem, count=1):
      # SCRIVERE QUI 
      if not isinstance(count, int) or count < 1:
         raise ValueError("In remove(), invalid count argument: " + str(count))
      if self.get(elem) < count :
         raise ValueError("In remove(), count too high:", count)
      self._data[elem] -= count
      if self._data[elem] == 0:
         self._data.pop(elem)
      
   """
      Elimina elem dal multi-insieme. Indipendentemente dalla eventuale molteplicita'
      che aveva elem nel multi-insieme prima dell'esecuzione del metodo, dopo
      l'esecuzione del metodo elem sara' assente dal multi-insieme.
      Il metodo non deve mai lanciare eccezioni, neanche se elem e' assente dal dizionario.
      @param elem elemento da rimuovere
   """
   def destroy(self, elem):
      # SCRIVERE QUI 
      if elem in self._data:
         self._data.pop(elem)
      # ERRORE MOLTO FREQUENTE: invocare pop senza aver verificato la presenza della chiave
            
   """
      Il metodo deve eliminare dal multi-insieme (usando il metodo destroy) tutti e soli
      gli elementi che hanno molteplicita' inferiore all'argomento minCount.
      L'argomento minCount deve essere un numero intero positivo, altrimenti
      viene sollevata l'eccezione ValueError.
      @param elem elemento da rimuovere
      @param minCount valore di soglia della molteplicita'
   """
   def removeFewerThan(self, minCount):
      # SCRIVERE QUI 
      if not isinstance(minCount, int) or minCount < 1:
         raise ValueError("In removeFewerThan(), invalid minCount argument: " + str(minCount))
      # errore frequente, qui sotto: usare direttamente self._data.keys() anziche' crearne una copia
      # con list... l'errore deriva dal fatto che destroy elimina chiavi dal dizionario che si startswith
      # esaminando... quindi l'elenco va clonato
      for key in list(self._data.keys()):  # oppure: for key in self.getElements()
         if self._data[key] < minCount:
            self.destroy(key)
         
   """
      Questo metodo DI CLASSE (non ha il parametro self...) riceve due multi-insiemi
      e, SENZA MODIFICARLI, costruisce un nuovo multi-insieme che sia l'unione dei due.
      L'unione tra due multi-insiemi e' un multi-insieme che ha come elementi tutti e
      soli gli elementi che appartengono ad almeno uno dei due multi-insiemi, con
      molteplicita' uguale alla somma delle molteplicita' dell'elemento nei due 
      multi-insiemi.
      Se almeno uno dei due argomenti ricevuti non e' un multi-insieme, solleva
      l'eccezione ValueError.
      Il metodo NON può accedere alla variabile di esemplare _data dei multi-insiemi
      ricevuti: può soltanto usare i metodi di esemplare dei multi-insiemi.
      @param multi1 un multi-insieme
      @param multi2 un altro multi-insieme
      @return il multi-insieme unione dei due parametri ricevuti
   """
   def union(multi1, multi2):
      # METODO GIà FATTO, NON MODIFICARE
      if not isinstance(multi1, MultiSet):
         raise ValueError("In union(), invalid argument: " + str(multi1))
      if not isinstance(multi2, MultiSet):
         raise ValueError("In union(), invalid argument: " + str(multi2))
      m = MultiSet()
      for key in multi1.getElements():
         m.add(key, multi1.get(key))
      for key in multi2.getElements():
         m.add(key, multi2.get(key))
      return m
      
   """
      Questo metodo DI CLASSE (non ha il parametro self...) riceve due multi-insiemi
      e, SENZA MODIFICARLI, costruisce un nuovo multi-insieme che sia l'intersezione dei due.
      L'intersezione tra due multi-insiemi e' un multi-insieme che ha come elementi tutti e
      soli gli elementi che appartengono ad entrambi i multi-insiemi, con
      molteplicita' uguale alla molteplicita' minima dell'elemento nei due multi-insiemi.
      Se almeno uno dei due argomenti ricevuti non e' un multi-insieme, solleva
      l'eccezione ValueError.
      Il metodo NON può accedere alla variabile di esemplare _data dei multi-insiemi
      ricevuti: può soltanto usare i metodi di esemplare dei multi-insiemi.
      @param multi1 un multi-insieme
      @param multi2 un altro multi-insieme
      @return il multi-insieme intersezione dei due parametri ricevuti
   """
   def intersection(multi1, multi2):
      # suggerimento: puo' essere utile analizzare il metodo union...
      # SCRIVERE QUI 
      if not isinstance(multi1, MultiSet):
         raise ValueError("In union(), invalid argument: " + str(multi1))
      if not isinstance(multi2, MultiSet):
         raise ValueError("In union(), invalid argument: " + str(multi2))
      m = MultiSet()
      for key in multi1.getElements():
         if multi2.get(key) != 0:        # oppure if key in multi2.getElements():
            m.add(key, min(multi1.get(key), multi2.get(key)))
      return m

"""
   Questa funzione, al di fuori della classe,
   deve creare un multi-insieme vuoto e riempirlo con i dati   
   contenuti nella stringa ricevuta come argomento, per poi, infine, restituire
   tale multi-insieme.
   La stringa va scomposta in "parole", definite come sequenze di lettere 
   dell'alfabeto consecutive; i separatori tra le parole sono, quindi, sequenze
   di caratteri diversi da lettere, di qualunque lunghezza (maggiore di zero).
   Ad esempio, spazi, lettere accentate e caratteri speciali sono separatori.
   Prima o dopo la suddivisione in parole, le lettere vanno convertite in minuscolo,
   prima di essere inserite nel multi-insieme.
   Ogni parola cosi' individuata va inserita nel multi-insieme, usando il suo
   metodo add. Quindi, ad esempio,
   la stringa "ciao,Ciao  casa, separate" deve dare origine
   al multi-insieme {'ciao', 'ciao', 'casa', 'separate'}
   mentre la stringa "ciao,CIAO  cas@, separate" deve dare origine
   al multi-insieme {'ciao', 'ciao', 'cas', 'separate'}
   Dipendentemente dalla modalita' con cui si separano le parole, possono crearsi
   delle parole che, in realta', sono stringhe vuote: queste NON vanno inserite
   nel multi-insieme.
   Se l'argomento ricevuto non e' una stringa, la funzione deve sollevare
   l'eccezione ValueError (eventualmente con un messaggio esplicativo).
   Se, invece, l'argomento ricevuto e' una stringa che non contiene alcuna parola,
   la funzione deve restituire coerentemente un multi-insieme vuoto, senza
   segnalare alcun errore.
   @param text una stringa
   @return un multi-insieme, il cui contenuto "corrisponde" a quello di text
"""
def wordCounts(text):
   # SCRIVERE QUI 
   if not isinstance(text, str):
      raise ValueError("In wordCounts(), text argument is not a string")
   m = MultiSet()
   from re import split
   words = split("[^a-z]+", text.lower())
   """
      senza usare split ed espressioni regolari, la riga precedente
      si poteva sostituire con il ciclo seguente
      
      words = [] # lista di parole in costruzione
      word = "" # parola in costruzione
      t = text.lower()
      for c in t:
         if c.isaplha(): # è una lettera...
            word += c # allungo la parola in costruzione
         else: # non è una lettera
            if len(word) > 0: # word è vuota se ci sono due "non lettere" consecutive...
               words.append(word)
            word = "" # nuova parola in costruzione
      if len(word) > 0: # parola rimasta in sospeso se l'ultimo carattere era una lettera...
         words.append(word)
   """
   for word in words:
      if len(word) > 0: # split può creare stringhe vuote... le evito
         m.add(word)
   return m

"""
   Non e' necessario analizzare il codice della seguente funzione main, che svolge alcuni utili collaudi 
"""
def main():
   # QUI NON SI POSSONO FARE MODIFICHE
   # (eventualmente si possono fare modifiche temporanee, ma poi
   #  bisogna ripristinare la funzione al suo contenuto originario)
   print()
   print("Se viene lanciata un'eccezione, nel codice e' sicuramente presente un errore")
   print("Dopo la prima segnalazione di un \"probabile errore\", le segnalazioni seguenti non sono affidabili")
   print()
   failed = []
   m = MultiSet()
   print("Collaudo del metodo __len__ : ", end=""); failed.append(False)
   if len(m) != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo __len__") 
   else : print("OK")
   print("Collaudo del metodo countAll : ", end=""); failed.append(False)
   if m.countAll() != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore  nel metodo countAll")
   else : print("OK")
   print("Collaudo del metodo get : ", end="")
   if m.get("X") != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore  nel metodo get")
   else : print("OK")
   print("Collaudo del metodo get e del metodo and : ", end=""); failed.append(False)
   m.add("X")
   if m.get("X") != 1 : failed[-1] = True
   m.add("X", 2)
   if m.get("X") != 3 : failed[-1] = True
   m.add("Y")
   if m.get("X") != 3 or m.get("Y") != 1 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo get o nel metodo add")
   else : print("OK")
   print("Collaudo del metodo clean : ", end=""); failed.append(False)
   m.clean()
   if len(m) != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo clean")
   else : print("OK")
   print("Collaudo del metodo remove : ", end=""); failed.append(False)
   m.add("X", 3)
   m.add("Y", 4)
   m.remove("Y")
   if len(m) != 2 or m.countAll() != 6 : failed[-1] = True
   m.remove("Y", 2)
   if len(m) != 2 or m.countAll() != 4 : failed[-1] = True
   try :
      m.remove("Y", 2)
      failed[-1] = True
   except ValueError: pass
   m.remove("Y")
   if len(m) != 1 or m.countAll() != 3 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo remove")
   else : print("OK")
   print("Collaudo del metodo destroy : ", end=""); failed.append(False)
   m.destroy("X")
   if len(m) != 0 : failed[-1] = True
   m.destroy("X") # non deve succedere niente
   if failed[-1] : print("Probabile errore nel metodo destroy")
   else : print("OK")
   print("Collaudo del metodo removeFewerThan : ", end=""); failed.append(False)
   try :
      m.removeFewerThan(0)
      m.removeFewerThan(-1)
      failed[-1] = True
   except ValueError: pass
   m.add("X", 3)
   m.add("Y", 4)
   m.add("Z", 3)
   m.removeFewerThan(4)
   if len(m) != 1 or m.countAll() != 4 : failed[-1] = True
   m.remove("Y", 2)
   m.removeFewerThan(3)
   if len(m) != 0 or m.countAll() != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo removeFewerThan")
   else : print("OK")
   print("Collaudo del metodo intersection : ", end=""); failed.append(False)
   n = MultiSet()
   m.add("X", 3)
   m.add("Y", 4)
   m.add("Z", 3)
   n.add("X", 3)
   n.add("Y", 4)
   n.add("Z", 3)
   y = MultiSet.intersection(m, n)
   if len(y) != 3 or y.countAll() != 10 or y.get("X") != 3 or y.get("Y") != 4 or y.get("Z") != 3 : failed[-1] = True
   n.clean()
   n.add("X", 2)
   y = MultiSet.intersection(m, n)
   if len(y) != 1 or y.countAll() != 2 or y.get("X") != 2 or y.get("Y") != 0 or y.get("Z") != 0 : failed[-1] = True
   n.clean()
   y = MultiSet.intersection(m, n)
   if len(y) != 0 or y.countAll() != 0 : failed[-1] = True
   if failed[-1] : print("Probabile errore nel metodo intersection")
   else : print("OK")
   print("Collaudo ddella funzione wordCounts : ", end=""); failed.append(False)
   x = wordCounts("pippo pluto, paperino $piPPo")
   if len(x) != 3 or x.countAll() != 4 or x.get("pippo") != 2 : failed[-1] = True
   x = wordCounts("")
   if len(x) != 0 : failed[-1] = True
   x = wordCounts("$$ % 09")
   if len(x) != 0 : failed[-1] = True
   try :
      wordCounts(23)
      failed[-1] = True
   except ValueError: pass
   if failed[-1] : print("Probabile errore nella funzione wordCounts")
   else : print("OK")
   if True in failed:
      print("\nCollaudo NON riuscito\n")
   else:
      print("\nCollaudo riuscito (ovviamente non significa che non ci siano errori...)\n")
   
main()
