"""
   Compitino di Elementi di Informatica e Programmazione - Novembre 2019

   Copiare questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola. Se il cognome contiene spazi o apostrofo,
   ignorarli; se contiene lettere accentate, usare la corrispondente lettera
   non accentata.
   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.

   TEMPO A DISPOSIZIONE = 1 ora e 15 minuti (75 minuti)
   
   Il progetto consiste nello sviluppo di alcune funzioni cooperanti tra loro,
   ma la struttura della cooperazione (cioe' dell'interazione tra le funzioni)
   e' gia' delineata.
   
   Non e' possibile utilizzare caratteristiche del linguaggio che non siano
   state presentate a lezione in questo anno accademico.

   Ciascuna funzione e' descritta nel commento che la precede, che a volte
   contiene anche delle prescrizioni o dei divieti da seguire durante la
   scrittura del codice che valgono soltanto per la funzione a cui si riferisce il commento.
   
   Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
   Le sezioni di codice mancante e da scrivere sono identificate dal commento
   # SCRIVERE QUI 
   
   Lo scopo delle diverse funzioni e' quello di compiere elaborazioni tra insiemi
   di numeri, ciascuno dei quali rappresentato mediante una tupla.
   Ogni funzione riceve una o più tuple, rappresentanti uno o più insiemi,
   e deve restituire una tupla rappresentante l'insieme risultante, sulla base
   dell'operazione che deve svolgere la funzione stessa.
   
   Ogni funzione, al proprio interno, può utilizzare UNA SOLA LISTA, oltre alla
   tupla che dovrà restituire.
   
"""
def main() :
   """
      Alcuni collaudi... NON MODIFICARE
   """
   set1 = (1, 2, 3, 4)
   set2 = (1, 2, 3)
   set3 = (1, 5, 3, 2, 6)
   if (
       equals(union(set1, set2), set1)   
	   and equals(intersection(set1, set2), set2)
	   and equals(tripleintersection(set1, set2, set3), set2)
	   and equals(union(set1, set3), (1, 2, 3, 4, 5, 6))
	   and equals(subtract(set3, set1), (5, 6))
	   and product((2, 3), (1, 2)) == ((2, 1), (2, 2), (3, 1), (3, 2))
	  ) :
      print("Collaudo riuscito (ma non significa che non ci siano errori...)")
   else :
      print("Collaudo non riuscito")
   """
   Qui sotto si possono inserire altri collaudi, ma poi devono essere eliminati (o commentati).
   """
   # EVENTUALMENTE SCRIVERE QUI
   
   """
   Aggiungere qui sotto un ciclo che acquisisca dall'utente un numero intero
   positivo maggiore di 1000 e visualizzi un numero intero casuale compreso
   tra 1 e tale numero (estremi inclusi). Il ciclo deve essere in grado di 
   acquisire qualunque informazione scritta dall'utente su una riga, senza
   che il programma si interrompa per il lancio di un'eccezione. Se il dato
   inserito non e' un numero oppure e' un numero che non soddisfa le specifiche,
   il programma deve scrivere "Riprova" e ripetere l'acquisizione.
   """
   print("Inserisci un numero intero positivo")
   # SCRIVERE QUI



# fine main

## Se le due tuple di numeri ricevute sono uguali restituisce True, altrimenti False.
#  Riceve due tuple, ciascuna contenente numeri tutti distinti tra loro.
#  Decide che due tuple sono uguali se hanno lo stesso contenuto,
#  indipendentemente dall'ordine in cui si trovano gli elementi. [IMPORTANTE]
#  Due tuple vuote sono (ovviamente) uguali.
#  Non e' possibile usare liste, ne' altre tuple ne' stringhe.
#  @param x una tupla
#  @param y una tupla
#  @return True se x e y sono uguali, False altrimenti
def equals(x, y) :
   # SCRIVERE QUI
   
# fine equals 

##
#
def union(x, y) :
   # SCRIVERE QUI

# fine union 

##
#
def intersection(x, y) :
   # SCRIVERE QUI
   
# fine intersection

##
#  Restituisce (x intersecato y) intersecato z.
#  ATTENZIONE: questa funzione non puo' invocare la funzione intersection.
def tripleintersection(x, y, z) :
   # SCRIVERE QUI
   
# fine tripleintersection

##
#  Restituisce x \ y
def subtract(x, y) :
   # SCRIVERE QUI
   
# fine subtract

##
#
def product(x, y) :
   # SCRIVERE QUI

# fine product

main()
