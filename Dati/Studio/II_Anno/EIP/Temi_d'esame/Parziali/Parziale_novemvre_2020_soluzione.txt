"""
Compitino di Elementi di Informatica e Programmazione - Novembre 2020

Copiare questo file in CognomeMatricola.py usando il proprio cognome
e il proprio numero di matricola. Se il cognome contiene spazi o apostrofo,
ignorarli; se contiene lettere accentate, usare la corrispondente lettera
non accentata.

MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
Quello sara' il file valutato per l'esame.

TEMPO A DISPOSIZIONE = 1 ora e 30 minuti (90 minuti)

Il progetto consiste nello sviluppo di alcune funzioni cooperanti tra loro,
ma la struttura della cooperazione (cioe' dell'interazione tra le funzioni)
e' gia' delineata.
 
[IMPORTANTE SOPRATTUTTO PER I "RIPETENTI" (ma non solo)]
Non e' possibile utilizzare caratteristiche del linguaggio che non siano
state presentate a lezione in questo anno accademico.

Ciascuna funzione e' descritta nel commento che la precede, che a volte
contiene anche delle prescrizioni o dei divieti da seguire durante la
scrittura del codice che valgono soltanto per la funzione a cui si riferisce il commento.

Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
Le sezioni di codice mancante e da scrivere sono identificate dal commento
# SCRIVERE QUI

E' VIETATO MODIFICARE ALTRE PARTI DEL CODICE O DEFINIRE FUNZIONI NON RICHIESTE

Buon lavoro!
   
"""

##   ATTENZIONE: l'esercizio si occupa di entità geometriche in un piano cartesiano,
##   ma non ha NIENTE a che fare con la programmazione grafica.


'''
Si implementi la funzione readPoints() che
acquisisce e restituisce la descrizione di una sequenza di punti nel piano cartesiano.
Ciascun punto è (ovviamente) descritto da una coppia di valori di tipo float,
nell'ordine la coordinata x (ascissa) e la coordinata y (ordinata).
Si può ipotizzare che l'utente fornisca coppie di coordinate
(andando a capo tra una coordinata e l'altra e tra due coppie di coordinate), fino
all'inserimento di una riga vuota, che termina l'acquisizione.

In ciascuna coppia di coordinate (che, quindi, si trovano in due righe consecutive)
il primo valore è la coordinata x.
Prevedere uno o più cicli while per chiedere all'utente ripetutamente l'input x
(che deve essere o la stringa vuota o una stringa convertibile in numero) e l'input y
(che deve essere una stringa convertibile in numero) fino a che questi non sono corretti.

Il valore restituito dalla funzione è una lista di tuple di valori in virgola mobile, così
composta: [(coordinata_x_punto_1, coordinata_y_punto_1), (coordinata_x_punto_2, coordinata_y_punto_1), ecc.]
La lista può anche essere vuota (se l'utente digita una riga vuota iniziale).

'''
## funzione readPoints()
#  @return la lista (eventualmente vuota) che descrive la sequenza di coppie di punti nel piano cartesiano
def readPoints() :
    pass # serve a zittire l'interprete finche' la funzione e' vuota (SI PUò LASCIARE, NON FA NIENTE)
    coordinate = []
    while True :
        x = input("Coordinata x numerica (riga vuota per terminare):")
        if len(x) == 0 : break
        #elif not x.isdigit(): continue  ##VERSIONE PIGRA... darebbe errore in caso di numeri con la virgola
        try: float(x)
        except: continue
            
        while True :
            y = input("Coordinata y numerica (non è possibile inserire la riga vuota per terminare):")
#            if not y.isdigit() or len(y) == 0 : continue  ##VERSIONE PIGRA... darebbe errore in caso di numeri con la virgola
            try: float(y)
            except: continue
            if len(y)==0:
                continue
            else: break
        coppia = (float(x),float(y))  
        coordinate.append(coppia)
    return coordinate


# provate a testare la funzione inserendo input validi o meno...
'''
readPoints()
'''
# fine readPoints



'''
Implementare la funzione getX() che restituisce le sole coordinate x.
getX() costruisce e restituisce una lista contenente le sole coordinate x dei punti presenti nell'elenco
ricevuto come parametro.
'''

## funzione getX()  
#  @param points un elenco di punti descritti nel formato definito da readPoints
#  @return una lista contenente, nello stesso ordine, soltanto le coordinate x
#
def getX(points) :
    pass # serve a zittire l'interprete finche' la funzione e' vuota (SI PUò LASCIARE, NON FA NIENTE)
    # SCRIVERE QUI
    x = [ ]
    for i in range(len(points)) :
        x.append(points[i][0])
    return x

## il seguente codice commentato può essere utile per testare la funzione
## sono solo alcuni esempi... se il test è ok non è garantito che non ci siano errori
## se togliete i commenti poi dovete inserirli nuovamente prima della consegna finale
'''
list1 = []
list2 = [(1, 1)]
list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
list4 = [(-1, -1), (-4, 3), (4, 5)]
if (getX(list1) == [] and getX(list2) == [1] and getX(list3) == [1, 2, 3, 4, 5] and getX(list4) == [-1, -4, 4]):
    print("\nTest ok")
'''
# fine getX 




'''
Implementare la funzione getY() che restituisce le sole coordinate y.
getY() costruisce e restituisce una lista contenente le sole coordinate y dei punti presenti nell'elenco
ricevuto come parametro.
'''

## funzione getY()   
#  @param points un elenco di punti descritti nel formato definito da readPoints
#  @return una lista contenente, nello stesso ordine, soltanto le coordinate y
#
def getY(points) :
    pass # serve a zittire l'interprete finche' la funzione e' vuota (SI PUò LASCIARE, NON FA NIENTE)
    # SCRIVERE QUI
    y = [ ]
    for i in range(len(points)) :
        y.append(points[i][1])
    return y


## il seguente codice commentato può essere utile per testare la funzione
## sono solo alcuni esempi... se il test è ok non è garantito che non ci siano errori
## se togliete i commenti poi dovete inserirli nuovamente prima della consegna finale
'''
list1 = []
list2 = [(1, 1)]
list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
list4 = [(-1, -1), (-4, 3), (4, 5)]
if (getY(list1) == [] and getY(list2) == [1] and getY(list3) == [1, 2, 3, 4, 5] and getY(list4) == [-1, 3, 5]):
    print("\nTest ok")
'''

# fine getY  





'''
Implementare la funzione delimitingRectangle() che trova il rettangolo circoscritto.
Individua il più piccolo rettangolo, avente i lati paralleli agli assi cartesiani,
che contenga tutti i punti presenti nell'elenco ricevuto come parametro
("più piccolo" significa di area minima, cioè con valori minimi per entrambe le dimensioni).
Il rettangolo individuato viene descritto da quattro valori, nell'ordine:
- coordinata x del vertice superiore sinistro,
- coordinata y del vertice superiore sinistro,
- dimensione (lato del rettangolo) lungo l'asse x,
- dimensione (lato del rettangolo) lungo l'asse y.
I quattro valori vengono inseriti in quest'ordine in una lista, che viene restituita dalla funzione.

Nel parametro in input points, i punti sono descritti nel formato definito dalla funzione readPoints.
Se points è una lista vuota, la funzione restituisce una lista avente il valore -1 nella terza
e nella quarta posizione (e due valori qualsiasi nelle prime due posizioni).
Se l'elenco non è vuoto, è ammissibile che il rettangolo degeneri in un segmento
(avendo, quindi, una delle due dimensioni uguale a zero) o in un punto (con entrambe
le dimensioni uguali a zero). Quest'ultima situazione si verifica, ovviamente, soltanto
quando tutti i punti dell'elenco coincidono, oppure l'elenco contiene un solo punto.
'''
## funzione delimitingRectangle()
#  @param points un elenco di punti descritti nel formato definito da readPoints
#  @return una lista di 4 valori che descrivono il rettangolo individuato
#
def delimitingRectangle(points) :
    pass # serve a zittire l'interprete finche' la funzione e' vuota (SI PUò LASCIARE, NON FA NIENTE)
    # SCRIVERE QUI
    if len(points) == 0 : return [0, 0, -1, -1]
    minX = maxX = points[0][0]
    minY = maxY = points[0][1]
    for i in range(len(points)) :
        x = points[i][0]
        y = points[i][1]
        minX = min(minX, x)
        maxX = max(maxX, x)
        minY = min(minY, y)
        maxY = max(maxY, y)
    return [minX, maxY, maxX-minX, maxY-minY]

## il seguente codice commentato può essere utile per testare la funzione
## sono solo alcuni esempi... se il test è ok non è garantito che non ci siano errori
## se togliete i commenti poi dovete inserirli nuovamente prima della consegna finale
'''
list1 = []
list2 = [(1, 1)]
list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
list4 = [(-1, -1), (-4, 3), (4, 5)]
if (delimitingRectangle(list1)[2] == -1
    and delimitingRectangle(list1)[3] == -1
    and delimitingRectangle(list2) == [1, 1, 0, 0]  
    and delimitingRectangle(list3) == [1, 5, 4, 4]   
    and delimitingRectangle(list4) == [-4, 5, 8, 6]):
    print("\nTest ok")
'''  
# fine delimitingRectangle  






'''
Implementare la funzione delimitingCircle() che trova il cerchio circoscritto.
Calcola il raggio del più piccolo cerchio, centrato nell'origine degli assi cartesiani,
che contenga tutti i punti presenti nell'elenco ricevuto come parametro.
Si ricordi che un punto di coordinate (x,y) e contenuto nel cerchio di raggio r se
(x*x + y*y)**(1/2)<= r
Nell'elenco, i punti sono descritti nel formato definito dalla funzione readPoints.
Se l'elenco è vuoto, la funzione restituisce -1.
'''

## funzione delimitingCircle()
#  @param points un elenco di punti descritti nel formato definito da readPoints
#  @return il raggio del più piccolo cerchio centrato nell'origine che contiene tutti i
#          punti presenti nell'elenco (-1 se l'elenco è vuoto)
#
def delimitingCircle(points) :
    pass # serve a zittire l'interprete finche' la funzione e' vuota (SI PUò LASCIARE, NON FA NIENTE)
    # SCRIVERE QUI
    radius = -1
    for i in range(len(points)) :
        x = points[i][0]
        y = points[i][1]
        radius = max(radius, (x*x + y*y)**(1/2))
    return radius


## il seguente codice commentato può essere utile per testare la funzione
## sono solo alcuni esempi... se il test è ok non è garantito che non ci siano errori
## se togliete i commenti poi dovete inserirli nuovamente prima della consegna finale
'''
list1 = []
list2 = [(1, 1)]
list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
list4 = [(-1, -1), (-4, 3), (4, 5)]
if (delimitingCircle(list1) == -1
    and delimitingCircle(list2) == 2**0.5
    and delimitingCircle(list3) == 7.0710678118654755
    and delimitingCircle(list4) == 6.4031242374328485):  
    print("\nTest ok")
'''
# fine delimitingCircle







'''
Implementare la funzione dizionarioCircles() che cerchi i punti contenuti all'interno di
un elenco di circonferenze di raggio r.
In dettaglio la funzione prende in input:
- una lista di valori corrispondenti al raggio di circonferenze centrate sull'origine (parametro raggi)
- una lista di punti (parametro points) descritti nel formato definito dalla funzione readPoints
La funzione poi costruisce un dizionario che ha come chiavi i valori r contenuti nella lista raggi e come valori corrispondenti
i punti di coordinate (x,y) contenuti nel cerchio di raggio r.
Il campo valore del dizionario deve avere lo stesso formato definito dalla funzione readPoints.
ATTENZIONE:
- Il campo chiave deve comparire una sola volta nel dizionario anche se sono presenti valori ripetuti nella lista raggio
- Se non ci sono punti nella lista Points contenuti nel cerchio di raggio r, il raggio r non deve comparire come chiave del dizionario

Quindi ad esempio se chiamo la funzione come segue:

dizionarioCircles([1,2,2,5],[(1, 1), (3, 3), (5, 5)])

questa mi deve fornire in output il seguente dizionario:

{2: [(1, 1)], 5: [(1, 1), (3, 3)]}
'''

## funzione dizionarioCircles()
#  @param points un elenco di punti descritti nel formato definito da readPoints
#  @return un dizionario
#
def dizionarioCircles(raggi,points):
    inCircle=dict()
    for r in raggi:
        listain=[]
        for (x,y) in points:
            if (x * x + y * y)**(1/2) <= r:
                listain.append((x,y))
        if len(listain)>0: inCircle[r]=inCircle.get("r",listain)
    return inCircle
      
## il seguente codice commentato può essere utile per testare la funzione
## sono solo alcuni esempi... se il test è ok non è garantito che non ci siano errori
## se togliete i commenti poi dovete inserirli nuovamente prima della consegna finale
'''
list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
list4 = [(-1, -1), (-4, 3), (4, 5)]
list5 = [(1, 1), (3, 3), (5, 5)]
if (dizionarioCircles([1,2,3,4,5,6],list3) == {2: [(1, 1)], 3: [(1, 1), (2, 2)], 4: [(1, 1), (2, 2)], 5: [(1, 1), (2, 2), (3, 3)], 6: [(1, 1), (2, 2), (3, 3), (4, 4)]}
    and dizionarioCircles([1,2,2,5],list5) == {2: [(1, 1)], 5: [(1, 1), (3, 3)]}
    and dizionarioCircles([1,2,3,4,5,6],list4) == {2: [(-1, -1)], 3: [(-1, -1)], 4: [(-1, -1)], 5: [(-1, -1), (-4, 3)], 6: [(-1, -1), (-4, 3)]}):  
    print("\nTest ok")
'''


##### NON MODIFICARE IL CODICE CHE SEGUE MA TOGLIERE IL COMMENTO QUANDO SI VUOLE TESTARE IL PROGRAMMA COMPLETO#####

def main() :
    """
    Alcuni collaudi... NON MODIFICARE

    Ovviamente finché non saranno state realizzate tutte le funzioni verrà visualizzato
    il messaggio "Collaudo non riuscito".
       
    NON CANCELLARE RIGHE PER NESSUN MOTIVO.

    NON è NECESSARIO ANALIZZARE IL CODICE DI QUESTA FUNZIONE.
    """
    collaudook=True
    list1 = []
    list2 = [(1, 1)]
    list3 = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]
    list4 = [(-1, -1), (-4, 3), (4, 5)]
    list5 = [(1, 1), (3, 3), (5, 5)]
    ##collaudo getX()
    print("\n###########\nCollaudo getX()")
    codice=1
    try:
        out=getX(list1)
    except:
        print("\nErrore nella funzione getX()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[]:
            print("\nLa funzione getX() da' un output corretto a list1")
        else:
            print("\nLa funzione getX() NON da' un output corretto a list1")
            collaudook=False
    codice=1
    try:
        out=getX(list2)
    except:
        print("\nErrore nella funzione getX()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[1]:
            print("\nLa funzione getX() da' un output corretto a list2")
        else:
            print("\nLa funzione getX() NON da' un output corretto a list2")
            collaudook=False
    codice=1
    try:
        out=getX(list3)
    except:
        print("\nErrore nella funzione getX()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[1, 2, 3, 4, 5]:
            print("\nLa funzione getX() da' un output corretto a list3")
        else:
            print("\nLa funzione getX() NON da' un output corretto a list3")
            collaudook=False
    codice=1
    try:
        out=getX(list4)
    except:
        print("\nErrore nella funzione getX()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[-1, -4, 4]:
            print("\nLa funzione getX() da' un output corretto a list4")
        else:
            print("\nLa funzione getX() NON da' un output corretto a list4")
            collaudook=False


    ##collaudo getY()
    print("\n###########\nCollaudo getY()")
    codice=1
    try:
        out=getY(list1)
    except:
        print("\nErrore nella funzione getY()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[]:
            print("\nLa funzione getY() da' un output corretto a list1")
        else:
            print("\nLa funzione getY() NON da' un output corretto a list1")
            collaudook=False
    codice=1
    try:
        out=getY(list2)
    except:
        print("\nErrore nella funzione getY()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[1]:
            print("\nLa funzione getY() da' un output corretto a list2")
        else:
            print("\nLa funzione getY() NON da' un output corretto a list2")
            collaudook=False
    codice=1
    try:
        out=getY(list3)
    except:
        print("\nErrore nella funzione getY()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[1, 2, 3, 4, 5]:
            print("\nLa funzione getY() da' un output corretto a list3")
        else:
            print("\nLa funzione getY() NON da' un output corretto a list3")
            collaudook=False
    codice=1
    try:
        out=getY(list4)
    except:
        print("\nErrore nella funzione getY()")
        collaudook=False
        codice=0
    if codice==1:
        if out==[-1, 3, 5]:
            print("\nLa funzione getY() da' un output corretto a list4")
        else:
            print("\nLa funzione getY() NON da' un output corretto a list4")
            collaudook=False

    ##collaudo delimitingRectangle()
    print("\n###########\nCollaudo delimitingRectangle()")
    codice=1
    try:
        out1=delimitingRectangle(list1)
        out2=delimitingRectangle(list1)
    except:
        print("\nErrore nella funzione delimitingRectangle()")
        collaudook=False
        codice=0
    if codice==1:
        if (out1[2]== -1) and (out2[3] == -1):
            print("\nLa funzione delimitingRectangle() da' un output corretto a list1")
        else:
            print("\nLa funzione delimitingRectangle() NON da' un output corretto a list1")
            collaudook=False

    codice=1
    try:
        out=delimitingRectangle(list2)
    except:
        print("\nErrore nella funzione delimitingRectangle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == [1, 1, 0, 0]  :
            print("\nLa funzione delimitingRectangle() da' un output corretto a list2")
        else:
            print("\nLa funzione delimitingRectangle() NON da' un output corretto a list2")
            collaudook=False
            
    codice=1
    try:
        out=delimitingRectangle(list3)
    except:
        print("\nErrore nella funzione delimitingRectangle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == [1, 5, 4, 4]  :
            print("\nLa funzione delimitingRectangle() da' un output corretto a list3")
        else:
            print("\nLa funzione delimitingRectangle() NON da' un output corretto a list3")
            collaudook=False

    codice=1
    try:
        out=delimitingRectangle(list4)
    except:
        print("\nErrore nella funzione delimitingRectangle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == [-4, 5, 8, 6] :
            print("\nLa funzione delimitingRectangle() da' un output corretto a list4")
        else:
            print("\nLa funzione delimitingRectangle() NON da' un output corretto a list4")
            collaudook=False

    ##collaudo delimitingCircle()
    print("\n###########\nCollaudo delimitingCircle()")
    codice=1
    try:
        out=delimitingCircle(list1)
    except:
        print("\nErrore nella funzione delimitingCircle()")
        collaudook=False
        codice=0
    if codice==1:
        if out== -1 :
            print("\nLa funzione delimitingCircle() da' un output corretto a list1")
        else:
            print("\nLa funzione delimitingCircle() NON da' un output corretto a list1")
            collaudook=False

    codice=1
    try:
        out=delimitingCircle(list2)
    except:
        print("\nErrore nella funzione delimitingCircle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == 2**0.5  :
            print("\nLa funzione delimitingCircle() da' un output corretto a list2")
        else:
            print("\nLa funzione delimitingCircle() NON da' un output corretto a list2")
            collaudook=False
            
    codice=1
    try:
        out=delimitingCircle(list3)
    except:
        print("\nErrore nella funzione delimitingCircle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == 7.0710678118654755  :
            print("\nLa funzione delimitingCircle() da' un output corretto a list3")
        else:
            print("\nLa funzione delimitingCircle() NON da' un output corretto a list3")
            collaudook=False

    codice=1
    try:
        out=delimitingCircle(list4)
    except:
        print("\nErrore nella funzione delimitingCircle()")
        collaudook=False
        codice=0
    if codice==1:
        if out == 6.4031242374328485 :
            print("\nLa funzione delimitingCircle() da' un output corretto a list4")
        else:
            print("\nLa funzione delimitingCircle() NON da' un output corretto a list4")
            collaudook=False


    ##collaudo dizionarioCircles()
    print("\n###########\nCollaudo dizionarioCircles()")
    codice=1
    try:
        out=dizionarioCircles([1,2,3,4,5,6],list3)
    except:
        print("\nErrore nella funzione dizionarioCircles()")
        collaudook=False
        codice=0
    if codice==1:
        if out== {2: [(1, 1)], 3: [(1, 1), (2, 2)], 4: [(1, 1), (2, 2)], 5: [(1, 1), (2, 2), (3, 3)], 6: [(1, 1), (2, 2), (3, 3), (4, 4)]} :
            print("\nLa funzione dizionarioCircles() da' un output corretto a list3")
        else:
            print("\nLa funzione dizionarioCircles() NON da' un output corretto a list3")
            collaudook=False

    codice=1
    try:
        out=dizionarioCircles([1,2,2,5],list5)
    except:
        print("\nErrore nella funzione dizionarioCircles()")
        collaudook=False
        codice=0
    if codice==1:
        if out == {2: [(1, 1)], 5: [(1, 1), (3, 3)]} :
            print("\nLa funzione dizionarioCircles() da' un output corretto a list5")
        else:
            print("\nLa funzione dizionarioCircles() NON da' un output corretto a list5")
            collaudook=False
            
    codice=1
    try:
        out=dizionarioCircles([1,2,3,4,5,6],list4)
    except:
        print("\nErrore nella funzione dizionarioCircles()")
        collaudook=False
        codice=0
    if codice==1:
        if out == {2: [(-1, -1)], 3: [(-1, -1)], 4: [(-1, -1)], 5: [(-1, -1), (-4, 3)], 6: [(-1, -1), (-4, 3)]}  :
            print("\nLa funzione dizionarioCircles() da' un output corretto a list4")
        else:
            print("\nLa funzione dizionarioCircles() NON da' un output corretto a list4")
            collaudook=False

    if collaudook:
        print("\nCollaudo riuscito! ma non significa che non ci siano errori...")
    else:
        print("\nCollaudo NON riuscito")

    """
    Qui sotto si possono inserire altri collaudi, ma poi devono essere eliminati (o commentati).
    """
    # EVENTUALMENTE SCRIVERE QUI

# fine main
main()