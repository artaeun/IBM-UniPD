"""
   Compitino di Elementi di Informatica e Programmazione - Novembre 2019

   Copiare questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola. Se il cognome contiene spazi o apostrofo,
   ignorarli; se contiene lettere accentate, usare la corrispondente lettera
   non accentata.
   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.

   TEMPO A DISPOSIZIONE = 1 ora e 15 minuti (75 minuti)
   
   Il progetto consiste nello sviluppo di alcune funzioni cooperanti tra loro,
   ma la struttura della cooperazione (cioe' dell'interazione tra le funzioni)
   e' gia' delineata.
   
   Non e' possibile utilizzare caratteristiche del linguaggio che non siano
   state presentate a lezione in questo anno accademico.

   Ciascuna funzione e' descritta nel commento che la precede, che a volte
   contiene anche delle prescrizioni o dei divieti da seguire durante la
   scrittura del codice che valgono soltanto per la funzione a cui si riferisce il commento.
   
   Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
   Le sezioni di codice mancante e da scrivere sono identificate dal commento
   # SCRIVERE QUI 
   
   Il "solitario bulgaro" e' un passatempo che richiede 45 carte da gioco (o altri
   oggetti, dal momento che il valore delle carte non viene utilizzato): non lo si 
   puo' considerare un gioco o un rompicapo perche' il "giocatore" non prende mai
   decisioni, deve soltanto applicare delle regole e procedere fino alla conclusione.
   Si inizia suddividendo le carte in "mucchietti" (che chiameremo, in inglese, "heap",
   che significa, appunto, "mucchio"): il numero di mucchietti e' casuale e il numero
   di carte in ciascun mucchietto e' casuale, l'unico vincolo e' che la somma delle
   dimensioni (ovvero del numero di carte) di tutti i mucchietti sia 45
   (sono valide anche configurazioni iniziali
   "degeneri", come "un solo mucchietto con 45 carte" oppure "45 mucchietti con una
   carta ciascuno", mentre una configurazione non degenere potrebbe essere 5 mucchietti
   di dimensione 20, 5, 1, 9, 10, rispettivamente).
   Ogni fase di gioco segue questa regola: prendi una carta da ciascun mucchietto e,
   con queste, crea un nuovo mucchietto, posto alla destra di quelli esistenti; un
   mucchietto che diventa vuoto scompare.
   Il "gioco" termina quando sono presenti 9 mucchietti, con dimensioni
   1, 2, 3, 4, 5, 6, 7, 8 e 9, in qualsiasi ordine.
   (si puo' dimostrare che il "gioco" termina sempre!)

   Il seguente Ã¨ l'esempio di una "partita":
   
   Vuoi giocare? 
   [11, 26, 7, 1] # configurazione iniziale casuale ma valida (numeri positivi con somma 45)
   [10, 25, 6, 4] # il mucchietto che aveva 1 carta e' scomparso
   [9, 24, 5, 3, 4]
   [8, 23, 4, 2, 3, 5]
   [7, 22, 3, 1, 2, 4, 6]
   [6, 21, 2, 1, 3, 5, 7] # il mucchietto che aveva 1 carta e' scomparso
   [5, 20, 1, 2, 4, 6, 7] # il mucchietto che aveva 1 carta e' scomparso
   [4, 19, 1, 3, 5, 6, 7] # il mucchietto che aveva 1 carta e' scomparso
   [3, 18, 2, 4, 5, 6, 7] # il mucchietto che aveva 1 carta e' scomparso
   [2, 17, 1, 3, 4, 5, 6, 7]
   [1, 16, 2, 3, 4, 5, 6, 8] # il mucchietto che aveva 1 carta e' scomparso
   [15, 1, 2, 3, 4, 5, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [14, 1, 2, 3, 4, 6, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [13, 1, 2, 3, 5, 6, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [12, 1, 2, 4, 5, 6, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [11, 1, 3, 4, 5, 6, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [10, 2, 3, 4, 5, 6, 7, 8] # il mucchietto che aveva 1 carta e' scomparso
   [9, 1, 2, 3, 4, 5, 6, 7, 8] # configurazione "vincente"
   Numero di mosse: 17
   
"""
def main() :
   """
      Alcuni collaudi... NON MODIFICARE
   """
   if (
       play([1, 2, 3, 4, 9, 8, 7, 6, 5]) == 0   # configurazione iniziale gia' "vincente"
	   and play([20, 5, 1, 9, 10]) == 39
	   and play([45]) == 36                     # configurazione iniziale "degenere"
	   and play([1] * 45) == 37                 # altra configurazione iniziale "degenere"
	   and play([1, 2, 3, 4, 9, 8, 7, 6]) == -1 # configurazione errata
	   and play([50, -5]) == -1                 # configurazione errata
	   and play([]) == -1                       # configurazione vuota, quindi errata
	  ) :
      print("Collaudo riuscito (ma non significa che non ci siano errori...)")
   else :
      print("Collaudo non riuscito")
   """
   Qui sotto si possono inserire altri collaudi, ma poi devono essere eliminati (o commentati).
   """
   # EVENTUALMENTE SCRIVERE QUI

   """
   Il codice seguente gestisce ripetute esecuzioni del passatempo
   a partire da configurazioni generate casualmente, fino a quando l'utente non
   chiede di terminare. La sequenza delle operazioni e':
   1) chiedi all'utente se vuole giocare:
      se la risposta inizia con n o N, termina;
      con qualsiasi altra risposta (anche "vuota") prosegui
      (in pratica, premendo ripetutamente "Enter" o "Invio" si continua a giocare)
   2) genera una nuova "partita" invocando createRandomConfig
   3) "gioca" fino alla fine, invocando play
   4) Visualizza il numero di fasi eseguite
   5) torna al punto 1)
   """

   while True :
      if input("Vuoi giocare? ").upper().startswith("N") : break
      print("Numero di mosse effettuate:", play(createRandomConfig()))

# fine main

## Crea e restituisce una configurazione iniziale casuale.
#  Crea una configurazione iniziale casuale, con questo algoritmo:
#     crea nuova lista vuota
#     carte disponibili = 45
#     finche' ci sono carte disponibili
#        genera un numero intero casuale nell'intervallo [1,carte disponibili]
#        sottrae tale dimensione al numero di carte disponibili
#        aggiunge tale dimensione in fondo alla lista
#  @return una configurazione iniziale casuale
def createRandomConfig() :
   # SCRIVERE QUI
   from random import randint
   heapList = []
   available = 45
   while available != 0 :
      nextHeapSize = randint(1, available)
      available -= nextHeapSize
      heapList.append(nextHeapSize)
   return heapList

## Fa una mossa del gioco.
#  Riceve la lista dei mucchietti (cioe' delle loro dimensioni)
#  e, agendo su tale lista, riduce di un'unita' la dimensione di
#  tutti i mucchietti, eliminando quelli che rimangono vuoti;
#  infine, aggiunge un nuovo mucchietto in fondo alla lista, con
#  la dimensione opportuna.
#  @param heapList la lista dei mucchietti attuale, che viene modificata
def nextMove(heapList) :
   # SCRIVERE QUI
   newHeapSize = len(heapList)
   for i in range(len(heapList)) :
      heapList[i] -= 1
   i = 0
   while i < len(heapList) :
      if heapList[i] == 0 :
         heapList.pop(i)
      else :
         i += 1
   heapList.append(newHeapSize)
   
## Verifica se il gioco e' finito.
#  Riceve la lista dei mucchietti (cioe' delle loro dimensioni)
#  e restituisce True se il gioco e' finito, altrimenti restituisce False.
#  La funzione NON PUO' MODIFICARE la lista, ne' crearne una copia.
#  @param heapList la lista dei mucchietti attuale
#  @return True se il gioco e' finito, False altrimenti
def finished(heapList) :
   # SCRIVERE QUI
   if len(heapList) != 9 : # se non ci sono esattamente 9 mucchietti, il gioco non e' finito
      return False
   for i in range(1, 10) : # cerco i mucchietti con dimensioni da 1 a 9
      found = False
      for heap in heapList : # c'e' un mucchietto di dimensione i ?
         if i == heap :
            found = True # c'e'
            break
      if not found : return False # manca il mucchietto di dimensione i
   return True # ci sono 9 mucchietti con tutte le dimensioni che servono, il gioco e' finito
 
## Gioca una partita visualizzando le mosse e restituendo il numero di mosse.
#  Riceve la lista iniziale dei mucchietti (cioe' delle loro dimensioni)
#  e fa una mossa dopo l'altra (invocando nextMove), dopo aver verificato che
#  il gioco non sia finito (invocando finished).
#  Visualizza il contenuto iniziale dei mucchietti (invocando print con la lista),
#  poi dopo ogni mossa visualizza di nuovo la lista.
#  Quando il gioco e' terminato, restituisce il numero di mosse effettuate.
#  Attenzione: potrebbero essere sufficienti ZERO mosse... se la configurazione
#  iniziale e' gia' una di quelle "vincenti".
#  Se la lista iniziale non e' valida, visualizza la lista e un messaggio d'errore,
#  poi termina restituendo -1 (attenzione: pensare bene a quali condizioni devono
#  essere inizialmente valide per la lista; e' lecito ipotizzare, per semplicita',
#  che sia una lista di numeri interi, eventualmente vuota).
def play(heapList) :
   # SCRIVERE QUI
   if sum(heapList) != 45 or min(heapList) < 1 :
      print(heapList)
      print("Configurazione iniziale non valida")
      return -1
   print(heapList)
   count = 0
   while not finished(heapList) :
      nextMove(heapList)
      print(heapList)
      count += 1
   return count

main()