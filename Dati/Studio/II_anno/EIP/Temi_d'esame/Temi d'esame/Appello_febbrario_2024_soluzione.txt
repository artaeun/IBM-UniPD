"""
   ELEMENTI DI INFORMATICA E PROGRAMMAZIONE

   ***********   TEMPO A DISPOSIZIONE: due ore e venti (140 minuti)

   Copiare questo file in CognomeMatricola.py usando il proprio cognome
   e il proprio numero di matricola.
   Se il cognome contiene spazi, apostrofo o altri caratteri non alfabetici, ignorarli;
   se contiene lettere accentate, usare la corrispondente lettera non accentata.
   Usare SOLO IL COGNOME, senza il nome.
   
   MODIFICARE SOLTANTO IL FILE CognomeMatricola.py !!!!!!!!
   Quello sara' il file valutato per l'esame.
   
   LA COMPRENSIONE DEL TESTO E' PARTE INTEGRANTE DELL'ESAME.
      
   Alcune sezioni di codice sono gia' presenti e non possono essere modificate!
   Le sezioni mancanti e da scrivere sono identificate dal commento # SCRIVERE QUI
   e # FINE SCRIVERE QUI
   
   Gli enunciati "pass" presenti nel codice, all'interno delle sezioni che vanno
   completate, servono a fare in modo che non ci siano errori di sintassi prima che
   il vostro codice venga scritto nelle funzioni e nei metodi:
   lasciateli dove sono, sono istruzioni "nulle", non eseguono niente.
   
   ATTENZIONE: nel codice gia' presente NON sono stati utilizzati caratteri di tabulazione
   per l'indentazione, sono tutti spazi singoli e si consiglia di fare altrettanto.
      
   Una possibile soluzione prevede la scrittura di circa 40
   righe di codice, oltre a quelle gia' presenti.
"""
"""
                         Descrizione generale
                         ====================

Scopo di questo programma è realizzare un componente di un gioco di
ruolo, in particolare il "combattimento" tra due gruppi di personaggi
(parties) antagonisti.

                              Personaggi
                              ==========

Ogni personaggio è caratterizzato dalle seguenti proprietà:

 - Nome
 - Punti vita (Health Points): la quantità di danni che il personaggio
   può sostenere in totale
 - Forza: influisce sull'abilità nell'uso della spada
 - Destrezza: influisce sull'abilità nell'uso dell'arco, oltre a
   controllare la prontezza di riflessi del personaggio.
 - Intelligenza: influisce sull'abilità nel lanciare incantesimi.

I personaggi possono essere di una delle segenti tre classi:
guerrieri, arcieri o maghi. Queste tre classi si differenziano per
come attaccano gli avversari, rispettivamente infliggendo un danno
proporzionale alla forza, alla destrezza e all'intelligenza. In
aggiunta, il danno viene incrementato del risultato del tiro di un
dado: i guerrieri usano un dado a 6 facce, gli arcieri usano un dado a
4 facce e i maghi usano un dado a 20 facce. Riassumendo, le diverse
classi infliggono danni come segue:

 - Guerrieri (Warrior): forza + dado a 6 facce
 - Arcieri (Archer): destrezza + dado a 4 facce
 - Maghi (Wizard): intelligenza + dado a 20 facce

Quando un personaggio viene attaccato, il danno inferto
dall'avversario viene sottratto dagli health points.
Quando gli health points diventano minori o uguali a 0, il personaggio
viene sconfitto e esce dal gioco.


                            Turno di gioco
                            ==============

Il combattimento si svolge a turni (rounds). In ogni turno ciascun
personaggio effettua un tiro di "iniziativa" per stabilire l'ordine di
azione all'interno del turno. Il tiro di iniziativa consiste nel
lancio di un dado a 20 facce a cui viene sommato il punteggio di
destrezza del personaggio: il risutato stabilisce l'ordine in cui i
personaggi agiscono nel turno. Ad esempio consideriamo i seguenti tre
personaggi:

 - Shapely Roberto con destrezza 11
 - Clumsy Wade con destrezza 19
 - Scruffy Stella con destrezza 6

All'inizio del turno i personaggi lanciano un dado da 20 ciascuno
ottenendo i seguenti punteggi di iniziativa:

 - Shapely Roberto ottiene 18 dal lancio del dado, sommando il suo
   punteggio di destrezza 11 il punteggio di iniziativa è 29
 - Clumsy Wade ottiene 12 dal lancio del dado, sommando il suo
   punteggio di destrezza 19 il punteggio di iniziativa è 31
 - Scruffy Stella ottiene 7 dal lancio del dado, sommando il suo
   punteggio di destrezza 6 il punteggio di iniziativa è 13

Nel turno i tre personaggi quindi agiscono in ordine decrescente di
iniziativa. Nell'esempio sopra quindi l'ordine di azione è

 - Clumsy Wade (iniziativa 31)
 - Shapely Roberto (iniziativa 29)
 - Scruffy Stella (iniziativa 13)

L'azione di un personaggio consiste nell'attaccare l'avversario con
MENO Health Points. Ad esempio, in questa situazione

 - Clumsy Wade (Archer, iniziativa 31, health points 100, party 1)
 - Shapely Roberto (Warrior, iniziativa 29, health points 140, party 2)
 - Scruffy Stella (Wizard, iniziativa 13, health points 130, party 2)

il personaggio Clumsy Wade (party 1) attacca Scruffy Stella (il
personaggio del party 2 con meno health points). Essendo un arciere,
Clumsy Wade lancia un dado a 4 facce a cui somma il suo punteggio di
destrezza. Ad esempio ottenendo 3 con il lancio infliggerà a Scruffy
Stella 22 punti danno, che vengono sottratti agli Health Points di
Scruffy Stella.
Dopodichè tocca a Shapely Roberto (party 2) attaccare Clumsy Wade
(unico giocatore del party 1).


                          Termine del gioco
                          =================

Il gioco termina quando tutti i giocatori di uno dei due gruppi
sono stati sconfitti.


              Rappresentazione dei gruppi di personaggi
              =========================================

Ciascun gruppo di personaggi (party) è rappresentato tramite un
dizionario le cui chiavi sono i nomi dei personaggi e i valori sono i
personaggi corrispondenti.
Ad esempio un "party" di 5 giocatori viene rappresentato in questo
modo usando le classi Warrior, Archer e Wizard definite più sotto:

{
    'Drab Claude': Wizard(name='Drab Claude', hp=260, strength=4,
                          dextery=2, intelligence=13),
    'Scary Melody': Archer(name='Scary Melody', hp=240, strength=6,
                           dextery=15, intelligence=11),
    'Worried Deborah': Wizard(name='Worried Deborah', hp=150,
                              strength=14, dextery=3, intelligence=20),
    'Witty Riley': Warrior(name='Witty Riley', hp=270, strength=4,
                           dextery=2, intelligence=3),
    'Plump Brian': Warrior(name='Plump Brian', hp=250, strength=19,
                           dextery=16, intelligence=9)
}

Il programma mantiene due dizionari di questo tipo, uno per ciascun
party di personaggi.

Quando un personaggio viene sconfitto DEVE essere rimosso dal
dizionario corrispondente.
"""

import random

# In questo gioco ci sono tre tipi di dadi, rappresentati dalle
# seguenti tre costanti.
# dadi a 4 facce
D4 = "d4"
# dadi a 6 facce
D6 = "d6"
# dadi a 20 facce
D20 = "d20"


# Dati i valori interi di tre caratteristiche `strength`, `dextery`, `intelligence`
# questa funzione restituisce qual è la maggiore delle tre. I possibili
# valori di ritorno sono quindi le stringhe `"strength"`, `"dextery"`,
# `"intelligence"`.
# Ad esempio, per la terna di parametri
#
#    strength=10, dextery=15, intelligence=8
#
# la funzione deve restituiscere la stringa "dextery".
#
# In caso di parità, la forza vince sulla destrezza che a sua volta
# vince sull'intelligenza.
# Ad esempio, con i seguenti parametri
#
#    strength=10, dextery=10, intelligence=8
#
# questa funzione deve restituire la stringa "strength" mentre con
# questi parametri
#
#    strength=10, dextery=15, intelligence=15
#
# questa funzione deve restituire "dextery".
def dominant_caracteristic(strength, dextery, intelligence):
    # SCRIVERE QUI ########################################
    if strength >= dextery and strength >= intelligence:
        return "strength"
    elif dextery >= strength and dextery >= intelligence:
        return "dextery"
    else:
        return "intelligence"
    # FINE SCRIVERE QUI ########################################


# Lancia un dado del tipo specificato. Ad esempio l'invocazione
#
#   roll_dice(D6)
#
# deve restituire un numero casuale tra 1 e 6, mentre
#
#   roll_dice(D20)
#
# deve restituire un numero casuale compreso tra 1 e 20.
#
# Se il parametro dice_type non è una stringa uguale a una delle
# costanti D4, D6 o D8, il codice deve sollevare un'eccezione
# ValueError.
#
# Suggerimento: la funzione random.randint(low, high) restituisce
# un numero casuale compreso tra `low` e `high`, inclusi.
def roll_dice(dice_type):
    # SCRIVERE QUI ##############################
    if dice_type == D4:
        return random.randint(1, 4)
    elif dice_type == D6:
        return random.randint(1, 6)
    elif dice_type == D20:
        return random.randint(1, 20)
    else:
        raise ValueError("Invalid dice type")
    # FINE SCRIVERE QUI ##############################


# Un personaggio di questo gioco ha le seguenti caratteristiche, memorizzate
# in variabili di istanza:
#
#   - il nome del personaggio (stringa);
#   - la quantità di Health Points (HP) (numero intero). Ogni attacco subito decrementa
#     questo punteggio. Quando il punteggio diventa 0 o negativo il personaggio
#     viene sconfitto;
#   - la forza (numero intero);
#   - la destrezza (numero intero);
#   - l'intelligenza (numero intero).
#
# Questa classe è la classe base per i vari tipi di personaggio.
class Character:
    # Il costruttore della classe.
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def __init__(self, name, hp, strength, dextery, intelligence):
        # Nome del personaggio
        self._name = name
        # Quantità di Healt Points
        self._hp = hp
        # Forza
        self._strength = strength
        # Destrezza
        self._dextery = dextery
        # Intelligenza
        self._intelligence = intelligence

    # Rappresenta un personaggio con una stringa nel seguente formato:
    #
    #    nome: tipo HP=punti vita S=forza D=destrezza I=intelligenza
    #
    # Ad esempio questo metodo invocato su un personaggio creato in questo modo:
    #
    #    Wizard("Pippo", 300, 8, 4, 10)
    #
    # restituisce questa stringa:
    #
    #    "Pippo: Wizard HP=300 S=8 D=4 I=10"
    #
    # METODO GIÀ IMPLEMENTATO, NON SI PUÒ MODIFICARE
    def __str__(self):
        # Questa riga di codice (DA NON MODIFICARE) estrae il nome
        # della classe dell'istanza su cui viene eseguito il metodo.
        class_name = str(type(self)).replace("<class '", "").replace("'>", "").replace("__main__.", "")  # fmt: off

        return "%s: %s HP=%d S=%d D=%d I=%d" % (
            self._name,
            class_name,
            self._hp,
            self._strength,
            self._dextery,
            self._intelligence,
        )

    # Restituisce il nome del personaggio
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def get_name(self):
        return self._name

    # Restituisce la quantità di Health Points correnti del personaggio.
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def get_hp(self):
        return self._hp

    # Restituisce la forza del personaggio
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def get_strength(self):
        return self._strength

    # Restituisce la destrezza del personaggio
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def get_dextery(self):
        return self._dextery

    # Restituisce l'intelligenza del personaggio
    #
    # METODO GIÀ SCRITTO, NON SI PUÒ MODIFICARE
    def get_intelligence(self):
        return self._intelligence

    # Restituisce `True` se il personaggio è stato sconfitto, ovvero se la
    # quantità di Health Points è minore o uguale a 0.
    def is_defeated(self):
        # SCRIVERE QUI ###################################
        return self._hp <= 0
        # FINE SCRIVERE QUI ###################################

    # Questo metodo toglie dagli Health Points del personaggio il danno
    # passato come parametro. Ad esempio, se `damage=3` e `self._hp=10`,
    # dopo aver chiamato questo metodo `self._hp` deve essere uguale a 7.
    def suffer_damage(self, damage):
        # SCRIVERE QUI ###################################
        self._hp -= damage
        # FINE Il tuo codice qui ###################################

    # Effettua un "tiro di iniziativa" per determinare quando il giocatore
    # agirà durante il turno.
    #
    # Questo metodo deve restituire la destrezza del personaggio
    # più il risultato di un lancio di un dado a 20 facce, ottenuto
    # chiamando la funzione roll_dice(D20).
    def initiative(self):
        # SCRIVERE QUI ###################################
        return self._dextery + roll_dice(D20)
        # FINE SCRIVERE QUI ###################################

    # Determina il danno da infliggere a un avversario. Questo metodo viene
    # realizzato diversamente dalle diverse sottoclassi più sotto.
    #
    # METODO GIÀ REALIZZATO, NON SI PUÒ MOTIFICARE
    def attack(self):
        # Questo codice non va modificato
        raise NotImplementedError


# Un guerriero attacca con la spada, infliggendo un danno pari alla propria
# forza (`strength`) più il risultato di un tiro di dado da 6.
#
# Notare che la classe Warrior estende la classe Character, quindi ne eredita
# tutti i metodi.
#
# QUESTO CODICE NON VA MODIFICATO: potete usarlo come esempio
# per implemenare le altre due classi
class Warrior(Character):
    def attack(self):
        return roll_dice(D6) + self.get_strength()


# Un arciere attacca con le frecce, infliggendo un danno pari alla propria
# destrezza (`dextery`) più il risultato di un tiro di dado da 4.
#
# NOTA: ricordate che una classe _non deve_ accedere direttamente
# alle variabili di istanza della superclasse
class Archer(Character):
    def attack(self):
        # SCRIVERE QUI ########################################
        return roll_dice(D4) + self.get_dextery()
        # FINE SCRIVERE QUI ########################################


# Un mago attacca con la magia, infliggendo un danno pari alla propria
# intelligenza (`intelligence`) più il risultato di un tiro di dado da 20.
#
# NOTA: ricordate che una classe _non deve_ accedere direttamente
# alle variabili di istanza della superclasse
class Wizard(Character):
    def attack(self):
        # SCRIVERE QUI ########################################
        return roll_dice(D20) + self.get_intelligence()
        # FINE SCRIVERE QUI


# Seleziona e restituisce un elemento casuale della lista fornita
# come parametro. Questa funzione viene usata per creare un nome
# casuale per i personaggi creati da random_character
#
# Il parametro elements è una lista di stringhe.
#
# Suggerimento: come prima ricordate che la funzione
# random.randint(low, high) restituisce un numero intero casuale compreso
# tra low e high inclusi.
def random_element(elements):
    # SCRIVERE QUI ######################################################
    n = len(elements)
    index = random.randint(0, n - 1)
    return elements[index]
    # FINE SCRIVERE QUI ######################################################


# Crea un personaggio con caratteristiche casuali. In particolare gli Health Points
# sono pari al tiro di 3 dadi da 20 moltiplicato per 10. Forza, destrezza e
# intelligenza sono il risultato di un tiro di dado da 20 ciascuno.
# La classe dipende dalla caratteristica dominante: un personaggio con
# un'intelligenza maggiore della propria forza e destrezza sarà un mago.
#
# Questa funzione è già parzialmente implementata, dovete completarla
def random_character():
    name = random_element(ADJECTIVES).capitalize() + " " + random_element(NAMES)
    hp = 10 * (roll_dice(D20) + roll_dice(D20) + roll_dice(D20))
    strength = roll_dice(D20)
    # SCRIVERE QUI ######################################################
    # Bisogna generare i punteggi di dextery, intelligence nello stesso modo
    # di `strength` e trovare la caratteristica dominante con la funzione
    # `dominant_caracteristic`.
    # Definite quindi le variabili `dextery`, `intelligence` e `dominant`
    # Inizializzatele nella maniera appropriata.
    dextery = roll_dice(D20)
    intelligence = roll_dice(D20)
    dominant = dominant_caracteristic(strength, dextery, intelligence)
    # FINE SCRIVERE QUI ######################################################
    if dominant == "strength":
        character = Warrior(name, hp, strength, dextery, intelligence)
    elif dominant == "dextery":
        character = Archer(name, hp, strength, dextery, intelligence)
    elif dominant == "intelligence":
        character = Wizard(name, hp, strength, dextery, intelligence)
    else:
        raise ValueError("Invalid dominant characteristic")

    return character


# Crea un "party" di `n` personaggi casuali.
#
# FUNZIONE GIÀ REALIZZATA, NON MODIFICARE.
def random_party(n):
    party = dict()
    for _ in range(n):
        character = random_character()
        party[character.get_name()] = character
    return party


# Questa funzione fa un "tiro di iniziativa" per ogni elemento del
# gruppo di avventurierə. restituisce una lista di coppie dove il primo elemento
# è il valore del tiro di iniziativa e il secondo elemento è il nome
# del personaggio.
#
# FUNZIONE GIÀ REALIZZATA, NON MODIFICARE
def roll_initiative(party):
    with_initiative = []
    for character in party.values():
        initiative = character.initiative()
        with_initiative.append((initiative, character.get_name()))
    return with_initiative


# Tutti i personaggi realizzano la stessa strategia di attacco:
# individuano l'avversario con meno Health Points e lo attaccano.
# Questa funzione deve individuare nel dizionario `party` la
# chiave il cui valore ha associato il valore minore di Health Points.
#
# Suggerimento: Ricordate che party.items() restituisce una lista di
# tutte le coppie chiave-valore del dizionario `party`.
def find_weakest(party):
    # SCRIVERE QUI ###################################################
    min_hp = None
    min_name = ""
    for name, character in party.items():
        print("  ", name)
        if min_hp is None or character.get_hp() < min_hp:
            min_hp = character.get_hp()
            min_name = name
    return min_name
    # FINE SCRIVERE QUI ###################################################


# Questa funzione implementa un attacco da parte di `attacker` (istanza della
# classe Character) nei contronti del membro più debole di `opposing_party`.
# Il parametro opposing_party è un dizionario dove le chiavi sono i nomi dei
# personaggi e i valori sono istanze di sottoclassi di Character.
#
# Questa funzione deve:
#
#  - trovare il nome dell'avversario più debole
#    (suggerimento: usate la funzione find_weakest)
#  - calcolare il danno che che l'attaccante infligge, usando il
#    metodo appropriato della classe attacker
#  - sottrarre agli health points dell'avversario più debole il danno
#    calcolato al passo precedente
#    (suggerimento: usate il metodo appropriato della classe Character)
#  - se l'avversario è stato sconfitto, allora va rimosso dal dizionario
#    `opposing party`.
def do_attack(attacker, opposing_party):
    # SCRIVERE QUI ###################################################
    target = opposing_party[find_weakest(opposing_party)]
    damage = attacker.attack()
    print(attacker.get_name(), "attacca", target.get_name(), "con danno:", damage)
    target.suffer_damage(damage)
    if target.is_defeated():
        print(target.get_name(), "è stato sconfitto")
        opposing_party.pop(target.get_name())
    # FINE SCRIVERE QUI ###############################################


# realizzazione di un turno (round) di gioco tra due `party` di avventurierə.
# Il turno si svolge nel seguente modo:
#
#  - Ogni giocatore tira un dado per l'iniziativa
#  - I nomi dei giocatori vengono quindi ordinati in ordine decrescente
#    di iniziativa
#  - In ordine decrescente di iniziativa, ogni giocatore attacca
#    il più debole del gruppo avversario usando il metodo `do_attack`
#  - Se tutti i giocatori di un party vengono sconfitti allora il ciclo
#    termina e la funzione restituisce
#
# Funzione già implementata, NON SI PUÒ MODIFICARE
def game_round(party1, party2):
    initiatives = []
    for initiative, name in roll_initiative(party1):
        initiatives.append((initiative, name, 1))
    for initiative, name in roll_initiative(party2):
        initiatives.append((initiative, name, 2))
    initiatives.sort(reverse=True)

    print("Ordine di attacco:")
    for initiative, name, party_num in initiatives:
        print("party", party_num, ":", name)

    for initiative, name, party_num in initiatives:
        if party_num == 1 and name in party1:
            attacker = party1[name]
            do_attack(attacker, party2)
        elif party_num == 2 and name in party2:
            attacker = party2[name]
            do_attack(attacker, party1)

        if len(party1) == 0 or len(party2) == 0:
            break


# Funzione ausiliaria per il collaudo. NON SERVE CAPIRLA, NON SI PUÒ modificare.
# Verifica che la condizione sia vera, altrimenti stampa il messaggio
def check(condition, msg):
    import sys

    if not condition:
        print("ERRORE", msg, file=sys.stderr)
        return 1
    return 0


# Collaudo: non è necessario analizzare/capire questo codice. Se desiderate
# potete aggiungere altri collaudi, basta che li commentiate prima di
# consegnare l'esame.
def main():
    cnt_errors = 0

    # Qui impostiamo il seed del generatore di numero pseducasuali, in modo che ogni esecuzione
    # venga ripetuta sempre uguale.
    random.seed(1234)

    print("Controllo di dominant_caracteristic")
    tup = (10, 10, 10)
    if dominant_caracteristic(*tup) is None:
        print(
            "ERRORE Dominant characteristic non ancora implementato, non proseguo il collaudo"
        )
        return
    cnt_errors += check(
        dominant_caracteristic(*tup) == "strength",
        "in %s la caratteristica dominante deve essere strength" % (tup,),
    )
    tup = (10, 14, 10)
    cnt_errors += check(
        dominant_caracteristic(*tup) == "dextery",
        "in %s la caratteristica dominante deve essere dextery" % (tup,),
    )
    tup = (10, 14, 17)
    cnt_errors += check(
        dominant_caracteristic(*tup) == "intelligence",
        "in %s la caratteristica dominante deve essere intelligenza" % (tup,),
    )
    tup = (10, 17, 17)
    cnt_errors += check(
        dominant_caracteristic(*tup) == "dextery",
        "in %s la caratteristica dominante deve essere dextery" % (tup,),
    )

    print("Collaudo lancio dadi")
    if roll_dice(D4) is None:
        print("ERRORE roll_dice non ancora implementato, non continuo il collaudo")
        return
    cnt_errors += check(
        1 <= roll_dice(D4) <= 4,
        "Un lancio di dado a 4 facce deve essere compreso tra 1 e 4 (inclusi)",
    )
    cnt_errors += check(
        1 <= roll_dice(D6) <= 6,
        "Un lancio di dado a 6 facce deve essere compreso tra 1 e 6 (inclusi)",
    )
    cnt_errors += check(
        1 <= roll_dice(D20) <= 20,
        "Un lancio di dado a 20 facce deve essere compreso tra 1 e 20 (inclusi)",
    )

    print("Collaudo metodi della classe Character")
    character = Warrior("Pippo", hp=300, strength=8, dextery=9, intelligence=10)
    cnt_errors += check(
        character.get_name() == "Pippo", "Il nome di questo personaggio è `Pippo`"
    )
    cnt_errors += check(
        character.get_hp() == 300,
        "Gli Health Points di questo personaggio devono essere 300",
    )
    cnt_errors += check(
        character.get_strength() == 8,
        "La forza di questo personaggio deve essere 8",
    )
    cnt_errors += check(
        character.get_dextery() == 9,
        "La destrezza di questo personaggio deve essere 9",
    )
    cnt_errors += check(
        character.get_intelligence() == 10,
        "L'intelligenza di questo personaggio deve essere 10",
    )
    try:
        actual_str = str(character).replace(" ", "").lower()
        expected_str = "Pippo: Warrior HP=300 S=8 D=9 I=10".replace(" ", "").lower()
        cnt_errors += check(
            actual_str == expected_str,
            "La formattazione come stringa del personaggio è sbagliata:\n  atteso '%s'\n  calcolato '%s'"
            % (expected_str, actual_str),
        )
    except TypeError:
        print("ERRORE Il metodo __str__ deve restituire una stringa")
        cnt_errors += 1
    character.suffer_damage(10)
    cnt_errors += check(
        character.get_hp() == 290,
        "Dopo aver subito 10 danni, il personaggio dovrebbe avere 290 Health Points",
    )
    character.suffer_damage(1000)
    cnt_errors += check(
        character.is_defeated(),
        "Dopo aver subito 1000 danni, il personaggio dovrebbe risultare sconfitto (character.is_defeated() == True)",
    )

    # reset dell'istanza
    character = Warrior("Pippo", hp=300, strength=8, dextery=9, intelligence=10)
    if character.initiative() is None:
        print("ERRORE initiative non implementato, termino il collaudo")
        return
    initiative_rolls = [character.initiative() for i in range(1000)]
    if (
        character.get_dextery() is None
        or character.get_strength() is None
        or character.get_intelligence() is None
    ):
        print(
            "ERRORE get_strength, get_dextery o get_intelligence non implementato, non proseguo il collaudo"
        )
        return
    cnt_errors += check(
        max(initiative_rolls) <= character.get_dextery() + 20,
        "Il massimo valore di iniziativa deve essere minore o uguale a 20 + destrezza",
    )
    cnt_errors += check(
        min(initiative_rolls) >= character.get_dextery(),
        "Il massimo valore di iniziativa deve essere maggiore o uguale alla destrezza",
    )

    print("Controllo del metodo di attacco delle classi specializzate")
    warrior = Warrior("Pippo", 300, 10, 10, 10)
    attacks = [warrior.attack() for _ in range(1000)]
    if attacks[0] is None:
        print("ERRORE attack non implementato, non proseguo il collaudo")
        return
    cnt_errors += check(
        max(attacks) <= warrior.get_strength() + 6,
        "Il massimo valore di attacco per un guerriero deve essere minore o uguale a 6 + forza",
    )
    cnt_errors += check(
        min(attacks) >= warrior.get_strength(),
        "Il minimo valore di attacco per un guerriero deve essere minore o uguale alla forza",
    )
    archer = Archer("Pippo", 300, 10, 10, 10)
    attacks = [archer.attack() for _ in range(1000)]
    if attacks[0] is None:
        print("ERRORE attack non implementato, non proseguo il collaudo")
        return
    cnt_errors += check(
        max(attacks) <= archer.get_dextery() + 4,
        "Il massimo valore di attacco per un arciere deve essere minore o uguale a 4 + destrezza",
    )
    cnt_errors += check(
        min(attacks) >= archer.get_dextery(),
        "Il minimo valore di attacco per un arciere deve essere minore o uguale alla destrezza",
    )
    wizard = Wizard("Pippo", 300, 10, 10, 10)
    attacks = [wizard.attack() for _ in range(1000)]
    if attacks[0] is None:
        print("ERRORE attack non implementato, non proseguo il collaudo")
        return
    cnt_errors += check(
        max(attacks) <= wizard.get_intelligence() + 20,
        "Il massimo valore di attacco per un mago deve essere minore o uguale a 20 + intelligenza",
    )
    cnt_errors += check(
        min(attacks) >= wizard.get_intelligence(),
        "Il minimo valore di attacco per un mago deve essere minore o uguale alla intelligenza",
    )

    print("Collaudo find_weakest")
    random.seed(1234)
    party1 = random_party(5)
    cnt_errors += check(
        find_weakest(party1) == "Silly Lewis",
        "find_weakest non ha identificato il giocatore con il minimo numero di health points",
    )

    if cnt_errors == 0:
        print(
            "Collaudo eseguito con successo. Il codice potrebbe contenere comunque errori: controllate bene!"
        )
    else:
        print("Collaudo fallito: %d controlli sono falliti" % cnt_errors)


# Funzione di collaudo che esegue una partita completa. Potete eseguirla oppure
# studiarla per capire come funziona il programma.
def complete_game():
    random.seed(12345)
    n = 2
    party1 = random_party(n)
    party2 = random_party(n)

    def print_party(party_name, party):
        print(party_name)
        for p in party:
            if isinstance(p, tuple):
                print(tuple(str(x) for x in p))
            elif isinstance(party, dict):
                print(party[p])

    print_party("Party 1", party1)
    print_party("Party 2", party2)

    round_number = 0
    while len(party1) > 0 and len(party2) > 0:
        print("=" * 20, "round", round_number, "=" * 20)
        game_round(party1, party2)
        round_number += 1

        if round_number >= 10000:
            exit("Sei in un loop infinito, probabilmente")

    if len(party1) > 0:
        print("Ha vinto il gruppo 1")
    else:
        print("Ha vinto il gruppo 2")


# Liste di aggettivi e nomi per generare nomi casuali dei personaggi.
ADJECTIVES = ["attractive","bold","beautiful","chubby","clean","dazzling","drab","elegant","fancy","fit","flabby","glamorous","gorgeous","handsome","long","magnificent","muscular","plain","plump","quaint","scruffy","shapely","short","skinny","stocky","ugly","unkempt","unsightly","aggressive","agreeable","ambitious","brave","calm","delightful","eager","faithful","gentle","happy","jolly","kind","lively","nice","obedient","polite","proud","silly","thankful","victorious","witty","wonderful","zealous","angry","bewildered","clumsy","defeated","embarrassed","fierce","grumpy","helpless","itchy","jealous","lazy","mysterious","nervous","obnoxious","panicky","pitiful","repulsive","scary","thoughtless","uptight","worried"]  # fmt: skip
NAMES = ["Wade","Dave","Seth","Ivan","Riley","Gilbert","Jorge","Dan","Brian","Roberto","Ramon","Miles","Liam","Nathaniel","Ethan","Lewis","Milton","Claude","Joshua","Glen","Daisy","Deborah","Isabel","Stella","Debra","Beverly","Vera","Angela","Lucy","Lauren","Janet","Loretta","Tracey","Beatrice","Sabrina","Melody","Chrysta","Christina","Vicki","Molly"]  # fmt: skip


main()
