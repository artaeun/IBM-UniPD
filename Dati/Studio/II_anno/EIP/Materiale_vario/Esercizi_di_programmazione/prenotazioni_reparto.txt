"""

Si chiede di scrivere un programma che gestisca, per un certo reparto,
la lista di attesa dei ricoveri programmati.

### INFORMAZIONI RELATIVE AL PAZIENTE ###

Per ciascun paziente, oltre alle informazioni utili a gestire la lista di attesa
devono essere memorizzati cognome, nome, codice fiscale e
il numero di giorni che il paziente trascorrerà in ospedale
(una previsione che assumiamo esatta per semplicità)

### LISTA DI ATTESA ###
La lista mantiene in memoria i pazienti in maniera ordinata.

L’ordine di accesso alle prestazioni di ricovero programmato si determina in base ai seguenti
fattori:
1. Livello di priorità clinica stabilita:
    - A (ricovero entro 30 giorni);
    - B (ricovero entro 60 giorni);
    - C (ricovero entro 180 giorni);
    - D (ricovero entro 365 giorni)
2. Ordine cronologico di iscrizione in lista

In particolare:
    - la posizione di un paziente di classe X in lista è calcolata come
        Tempo_attesa_trascorso * Tempo_massimo_previsto_per_la_Priorità_D / Tempo_massimo_previsto_per_la_Priorità_X

La lista di attesa va verificata ad intervalli di tempo definiti (ad esempio checkinterval di 5 giorni) al fine di:
- aggiornare i giorni di attesa in lista del paziente
- inserire i nuovi pazienti in lista di attesa 
- programmare i ricoveri (il che comporta la rimozione dalla lista di attesa)

I dati dei pazienti da inserire in lista di attesa vengono prelevati da un file di testo.txt
tab delimited, codifica UTF-8 (usare come argomento della funzione open encoding="UTF-8" quando si apre il file).

Dalla posizione che il paziente assume in lista di attesa e dal numero di posti letto del reparto
si può fare una stima dei tempi di attesa per il paziente.
Se questi superano il livello di priorità clinica stabilita, il reparto rifiuta l'inserimento del paziente in lista di attesa.
Viene stampato l'avviso: "Questo paziente non può essere inserito con la priorità richiesta" seguito dai dati del paziente


### PROGRAMMAZIONE DEI RICOVERI ###
Con un intervallo di tempo regolare definito da checkinterval (uguale a quello di verifica della lista di attesa)
vengono programmati i ricoveri dei giorni successivi
cioè quelli che hanno inizio, ma non necessariamente fine, entro checkinterval giorni successivi. 
In particolare, viene pianificata l'occupazione dei letti disponibili in modo di servire i pazienti
in lista nell'ordine di priorità tenendo conto del numero di giorni previsti per il ricovero.

I Ricoveri vengono gestiti come una lista di letti a disposizione,
in cui ogni letto è una coda FIFO che contiene in ogni posizione, come dato,
l'oggetto di tipo paziente che occupa il letto

##############################################################################

Vi viene fornito:
- lo scheletro della soluzione per le classi Lista Attesa e Paziente
- la classe coda FIFO già implementata
- la classe Reparto parzialmente implementata (viene richiesto di implementare il metodo programma_ricoveri)
- il codice per il test (parziale) delle classi progettate
- due file .txt codifica UTF-8 per poter testare il programma

LEGGERE CON ATTENZIONE LE INTESTAZIONI DEI METODI DELLE CLASSI E I COMMENTI AL CODICE CHE SONO STATI FORNITI

Integrare eventuali specifiche mancanti facendo ipotesi ragionevoli, motivate con commenti nel codice

Buon lavoro!

"""


class ListaAttesa:
    def __init__(self, checkinterval):
        """Usa una lista vuota per inizializzare l'oggetto"""
        ...

    def __len__(self):
        """Restituisce il numero di pazienti in attesa"""
        ...

    def is_empty(self):
        """Restituisce True se la lista di attesa è vuota"""
        ...

    def __getitem__(self, k):
        """Restituisce il paziente k-essimo in attesa"""
        ...

    def get_checkinterval(self):
        """Restituisce l'intervallo di tempo, in giorni, tra un aggiornamento della lista e l'altro"""
        ...

    def __str__(self):
        """Restituisce, come stringa, le informazioni relative ai pazienti in attesa"""
        ...

    def rm(self, k=0):
        """Rimuove e restituisce il paziente in lista di attesa in posizione k"""
        ...

    def insert(self, paz, reparto):
        """Inserisce un oggetto di classe Paziente (paz) nella lista di attesa
        passo in ingresso anche un oggetto di classe Reparto perché il numero di letti del reparto
        mi serve per calcolare una stima del tempo di attesa prima del ricovero (vd. metodo expectedTime)
        """
        ...

    def expectedTime(self, k, nletti):
        """Stima del tempo di attesa prima del ricovero usando la posizione k in cui verrebbe inserito il paziente
        nella lista di attesa e il numero di letti del reparto in cui voglio inserirlo"""
        totale = 0
        for j in range(k):
            paz = self._data[j]
            totale = totale + paz.get_giorniricovero()
        return round(totale / nletti)

    def checklist(self, reparto, fileinserimenti=""):
        """Verifico la lista di attesa al fine di
        1) aggiornare il conteggio dei giorni di attesa
        2) inserire i nuovi pazienti in lista di attesa prelevando i loro dati da un file di testo.txt fileinserimenti
        tab delimited, codifica UTF-8 (usare come argomento della funzione open encoding="UTF-8").
        Se la stringa fileinserimenti è vuota, non ci sono pazienti da inserire in lista di attesa
        3) programmare i ricoveri (il metodo programma_ricoveri agisce su oggetti di classe Reparto e pertanto va definito in quella classe)
        """

        """Aggiornamento tempo di attesa"""
        ...

        """Inserimento pazienti nuovi"""
        ...

        """Programmazione dei ricoveri"""
        reparto.programma_ricoveri(
            self
        )  # questo metodo va definito nella classe Reparto


class Paziente:
    _PRIORITY_DICT = {"A": 30, "B": 60, "C": 180, "D": 365}

    def __init__(self, cognome, nome, cf, giorni, priority):
        self._nome = nome
        self._cognome = cognome
        self._cf = cf
        self._giorniricovero = giorni
        self._priority = priority
        self._giorniattesa = 0

    def __str__(self):
        """Return string representation"""
        return (
            "\n Nome: "
            + self._nome
            + "\nCognome: "
            + self._cognome
            + "\nCF: "
            + self._cf
            + "\n Durata attesa del ricovero: "
            + str(self._giorniricovero)
            + "\nPriorità: "
            + self._priority
            + "\nGiorni di attesa in lista: "
            + str(self._giorniattesa)
        )

    def score(self):
        """Return score priority"""
        ...

    def add_giorniattesa(self, giorni):
        ...

    def get_giorniricovero(self):
        ...

    def get_priority(self):
        ...


class Reparto:
    def __init__(self, capacity):  # capacity è il numero di letti
        """Initialize beds"""
        self._capacity = capacity
        self._letti = []
        for i in range(self._capacity):
            self._letti.append(ArrayQueue())

    def __str__(self):
        """Return string representation of the patients occupying beds"""
        out = ""
        for i in range(self._capacity):
            letto = self._letti[i]
            if not letto.is_empty():
                paz = letto.first()
                out = out + str(paz) + "\n"
        return out

    def programma_ricoveri(self, listaattesa):
        """prende in ingresso una lista d'attesa per capire chi ha la priorità
        e per aggiornare la lista quando un paziente viene ricoverato
        infatti quando per un paziente viene programmato il ricovero,
        il paziente deve essere cancellato dalla lista di attesa
        """
        ...


class ArrayQueue:  # FIFO queue implementation using a Python list as underlying storage
    DEFAULT_CAPACITY = 10  # moderate capacity for all new queues

    def __init__(self):  # Create an empty queue
        self._data = [None] * ArrayQueue.DEFAULT_CAPACITY
        self._size = 0
        self._head = 0

    def __len__(self):  # Return the number of elements in the queue
        return self._size

    def is_empty(self):  # Return True if the queue is empty
        return self._size == 0

    def first(self):  # Return (but do not remove) the element at the head of the queue.
        if self.is_empty():
            raise IndexError("Queue is empty")
        return self._data[self._head]

    def dequeue(self):  # Remove and return the first element of the queue (i.e., FIFO).
        if self.is_empty():
            raise IndexError("Queue is empty")
        answer = self._data[self._head]
        self._data[self._head] = None  # help garbage collection
        self._head = (self._head + 1) % len(self._data)
        self._size -= 1
        if 0 < self._size < len(self._data) // 4:
            self._resize(len(self._data) // 2)

        return answer

    def enqueue(self, e):  # Add an element to the back of queue
        if self._size == len(self._data):
            self._resize(2 * len(self._data))  # double the array size
        tail = (self._head + self._size) % len(self._data)
        self._data[tail] = e
        self._size += 1

    def _resize(
        self, cap
    ):  # Resize to a new list of capacity >= len(self). we assume cap >= len(self)
        old = self._data  # keep track of existing list
        self._data = [None] * cap  # allocate list with new capacity
        walk = self._head
        for k in range(self._size):  # only consider existing elements
            self._data[k] = old[walk]  # intentionally shift indices
            walk = (walk + 1) % len(old)  # use old size as modulus
        self._head = 0  # head realigned


##test parziale
cardiologia = Reparto(capacity=3)
print(cardiologia)
attesa_cardiologia = ListaAttesa(checkinterval=5)
print(attesa_cardiologia)
attesa_cardiologia.checklist(fileinserimenti="dainserire.txt", reparto=cardiologia)
print(attesa_cardiologia)
attesa_cardiologia.checklist(fileinserimenti="dainserire2.txt", reparto=cardiologia)
print(attesa_cardiologia)
print(cardiologia)
attesa_cardiologia.checklist(fileinserimenti="", reparto=cardiologia)
attesa_cardiologia.checklist(fileinserimenti="", reparto=cardiologia)
attesa_cardiologia.checklist(fileinserimenti="", reparto=cardiologia)
